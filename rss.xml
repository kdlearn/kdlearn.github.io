<?xml version="1.0" encoding="utf-8" ?>
<rss
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  version="2.0">
<channel>
  <title>Koding University</title>
  <atom:link
    href="//learn.koding.com/rss.xml"
    rel="self" type="application/rss+xml" />
  <link>//learn.koding.com</link>
  <description>
    An education center focused around the online development environment
    Koding.
  </description>
  <language>en</language>
  
  <item>
    <title>Getting Started with Ruby</title>
    <link>//learn.koding.com/guides/getting-started-ruby</link>
    <pubDate>"2014-08-20T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-ruby</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll explain what Ruby is, and how to write a simple web 
server using the built in Socket library. So, lets get started!
  What is Ruby Ruby is a popular, general purpose, high level programing language. It 
focuses on readability programmer enjoyment over raw performance. Koding 
VMs come pre-installed with Ruby and RubyGem, making it super easy to get 
started. Lets see what it looks like to run some Ruby code!
  Running your first Ruby script Open up your Ace Editor and create a new file named hello.rb.Paste in the following code into that file.
puts &amp;quot;Hello from Ruby!&amp;quot;

The puts name is a function which takes a string and prints it to the 
Standard Output (STDOUT) of the process. Lets try running this file and 
see the output, but first save the file with Ctrl-s. Now, open up 
your Terminal and type in the following command.
ruby hello.rb
You should see output similar to this:
joshmurray@vm-20:~$ ruby hello.rb
Hello from Ruby!
joshmurray@vm-20:~$
Neat! Now that we know how to run some code, lets look at a real example 
of some Ruby code.
  Your first Ruby web server Just like before, create a new file named web.rb, and paste in the 
following code.
require &amp;apos;socket&amp;apos;

server = TCPServer.new &amp;apos;0.0.0.0&amp;apos;, 3000

loop do
  socket  = server.accept
  request = socket.gets
  puts request

  response = &amp;quot;Hello World!\n&amp;quot;
  socket.print &amp;quot;HTTP/1.1 200 OK\r\n&amp;quot; +
               &amp;quot;Content-Type: text/plain\r\n&amp;quot; +
               &amp;quot;Content-Length: #{response.bytesize}\r\n&amp;quot; +
               &amp;quot;Connection: close\r\n&amp;quot;
  socket.print &amp;quot;\r\n&amp;quot;

  socket.print response
  socket.close
end

That looks a bit complicated, so lets break it down piece by piece.
require &amp;apos;socket&amp;apos;
server = TCPServer.new &amp;apos;0.0.0.0&amp;apos;, 3000

First, we use require to import the socket module. TCPServer comes 
from this module, and we use it to create a new Socket server on 
0.0.0.0:3000. This is a plain socket server, meaning that we&amp;apos;re 
going to implement an HTTP response ourselves. Getting our hands dirty!
loop do
  socket  = server.accept
  puts socket.gets

Next up, loop do creates a never ending loop. Each iteration of the 
loop executes until server.accept. This blocks, waiting for connections 
from our TCP Server.
When your browser connects to the TCP Server, the socket servers returns 
a connection object named socket. From that object, we use gets to 
read a line from the incoming data Stream.
The incoming stream is what your browser sent to the TCP Server as part 
of it&amp;apos;s request. So with socket.gets you&amp;apos;re simply reading what your 
browser sent. We then take that, and use puts to print it to the STDOUT 
just like in our Hello example above. Note that we&amp;apos;re just printing to 
STDOUT to help us understand when requests are incoming, it is not 
required.
  response = &amp;quot;Hello World!\n&amp;quot;
  socket.print &amp;quot;HTTP/1.1 200 OK\r\n&amp;quot; +
               &amp;quot;Content-Type: text/plain\r\n&amp;quot; +
               &amp;quot;Content-Length: #{response.bytesize}\r\n&amp;quot; +
               &amp;quot;Connection: close\r\n&amp;quot;
  socket.print &amp;quot;\r\n&amp;quot;

Next up, we start building our response. We start by writing &amp;quot;Hello 
World!\n&amp;quot; to the variable response. We then print a series of strings 
to the socket.
This section can get a little confusing, because it involves returning 
HTTP Headers to the requesting browser. We won&amp;apos;t go into detail of this 
here, but just understand that this is part of the HTTP Spec, that we&amp;apos;re 
manually implementing.
As part of these headers, we print the Content-Length, which is the 
number of bytes in our response string. After all the headers are done, 
we follow up by adding one more new line, to separate the headers from 
the content we want to print. Again, as part of the HTTP Spec.
  socket.print response
  socket.close
end

Finally, we use that same socket.print method to print our response 
variable. After that&amp;apos;s done, we close the socket.
But does this work? Open up your Terminal just like before, 
and run it with the following command.
ruby web.rb
Once that&amp;apos;s running, open up your browser and connect to the following 
address, replacing username with your Koding Username.
http://username.kd.io
Congratulations, you&amp;apos;re running a Ruby Web server, with a hand made HTTP 
implementation!
  Installing dependencies with RubyGem This is great and all, but it&amp;apos;s quite the complex way to run a simple web 
server. Lets make this a lot easier with the popular web framework, 
Sinatra.
To use Sinatra, we need to install it. Run the following command to 
install Sinatra with RubyGems.
sudo gem install sinatra
RubyGems is Ruby&amp;apos;s answer to Dependency Management. Similar to NPM and 
PIP, the above command will install Sinatra and all dependencies of that 
library. Remember, your Sudo password is your Koding password.
Next up, open your web.rb file again, and replace the entire contents 
with the following code.
require &amp;apos;sinatra&amp;apos;

set :bind, &amp;apos;0.0.0.0&amp;apos;
set :port, 3000

get &amp;apos;/&amp;apos; do
  &amp;quot;Hello World, from Sinatra!&amp;quot;
end

Now run it just like before, and visit it in your browser. Just like 
that, you have a working Sinatra web server!
In a following tutorial we&amp;apos;ll dig deeper into Sinatra, but for now check 
out the Official Documentation. And as always, Happy Koding!
</description>
  </item>
  
  <item>
    <title>Thinkup, Analytics for Humans</title>
    <link>//learn.koding.com/guides/there-are-things-facebook-&amp;-twitter-don't-tell-you</link>
    <pubDate>"2014-08-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/there-are-things-facebook-&amp;-twitter-don't-tell-you</guid>
    <author>Team Koding</author>
    <description>ThinkUp gives you insights about your social networks that you can&amp;apos;t
find anywhere else. ThinkUp is a smart, simple web app that analyzes
your activity on Facebook and Twitter. ThinkUp gives you fun and
surprising insights about what you and your friends are doing online.
ThinkUp&amp;#x2019;s insights come any way you want them. Check them any time on
your phone, tablet, or computer at your personal ThinkUp address. Get
an email telling you what&amp;apos;s up with your friends and followers every
day (or less often if you prefer).
  Steps to Install 
Select the target vm from the dropdown on the right 
Click &amp;quot;Install Thinkup&amp;quot; button
Enter you Koding passwords 
Ensure that your Thinkup account is configured 
Click the link to open up Thinkup
Log into Thinkup with the credentials provided 
Thinkup is now installed and configured. Congrats! 

</description>
  </item>
  
  <item>
    <title>Installing Linux Dash</title>
    <link>//learn.koding.com/guides/linux-dash</link>
    <pubDate>"2014-08-15T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/linux-dash</guid>
    <author>Team Koding</author>
    <description>Linux Dash is a low-overhead monitoring web dashboard for a GNU/Linux 
machine. With a dead-simple installation and easy to view information, it 
can make viewing an overview of your Linux system a beginner friendly 
endevour. In this guide we&amp;apos;ll go over this two step install process on 
Koding. Lets get started!
  Installation To install dash we simply need download linux-dash from source, and then 
place it into an Apache directory. To do this, run the following 
commands. Note, you can simply copy the entire group of commands and 
paste it into your Terminal. They will execute sequentially.
wget https://github.com/afaqurk/linux-dash/archive/master.zip
unzip master.zip
rm master.zip
mv linux-dash-master ~/Web/dash
That&amp;apos;s it! Dash uses PHP, which means there is no traditional 
installation process. We only need a few things, all of which Koding 
comes with by default!
  Dashboard To access your dashboard, visit your Koding Domain, which will look like 
the following address.
http://username.kd.io
Where username is your Koding Username. You will see a Dashboard, 
similar to the following image.

That&amp;apos;s all there is to it! Enjoy!
</description>
  </item>
  
  <item>
    <title>What happens upon upgrade?</title>
    <link>//learn.koding.com/guides/what-happens-upon-upgrade</link>
    <pubDate>"2014-08-11T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/what-happens-upon-upgrade</guid>
    <author>Team Koding</author>
    <description>You just upgraded your account, awesome (and thanks!) but what happens now?
Based on the type of resource pack you selected on the Pricing page you now have access to more resources as compared to your free Koding account. Below is a list of the resources that have been upgraded.
  CPU CPU resources available to your account have been upgraded. More compute power ftw!! Note: CPUs are shared among all your running VMs. If you run only one VM, all CPU will be utilized by that one VM; if you have 10 VMs running, they will share your available CPU resources across the 10.
  Storage (Disk) You can distribute this quota across all of your VMs as you need. For e.g. If you have upgraded to get 40GB of storage, you can allocate this 40GB of disk space to one of your VMs or distribute the storage across your VMs.
  Memory (RAM) Just like CPU and storage, memory/RAM is also shared between your running VMs. Each VM starts with allocated memory. If you have 10GB limit, you can run 10VMs at 1GB, or 3 x 3GB or 1 x 10GB.
  Always on VMs The maximum number of VMs that you can keep turned on 24/7. For example, you bought a package that comes with 10 VMs and one always-on VM. The VM you mark as always-on will work 24/7, however the others will be powered off automatically 15 minutes after you log out or 15 minutes of inactivity.
  Other Benefits Besides the awesome features you get upon upgrade, your VMs get moved to premium infrastucture that will ensure your VMs stay on 24/7 and your data is secure.
If you ever have any question regarding resources or have any issues you can make a support request.
</description>
  </item>
  
  <item>
    <title>3 Easy steps to get started with Laravel on Koding</title>
    <link>//learn.koding.com/guides/laravel-kdapp</link>
    <pubDate>"2014-08-08T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/laravel-kdapp</guid>
    <author>Granger Lang</author>
    <description>What is Laravel? 
Laravel is a web application framework with expressive, elegant syntax. They believe development must be an enjoyable, creative experience to be truly fulfilling. Laravel attempts to take the pain out of development by easing common tasks used in the majority of web projects, such as authentication, routing, sessions, and caching.
Laravel aims to make the development process a pleasing one for the developer without sacrificing application functionality. Happy developers make the best code. To this end, they&amp;apos;ve attempted to combine the very best of what they have seen in other web frameworks, including frameworks implemented in other languages, such as Ruby on Rails, ASP.NET MVC, and Sinatra.
Laravel is accessible, yet powerful, providing powerful tools needed for large, robust applications. A superb inversion of control container, expressive migration system, and tightly integrated unit testing support give you the tools you need to build any application with which you are tasked.

Getting started with Laravel on Koding is as simple as following these 3 steps!
Step 1: 
Run the Larevel Installer App on Koding, which will install Laravel and its dependencies on your VM. [Note: you have to be 
logged into your Koding account in order to run the app.]
This is what you will see when you launch the app from the Koding App Store:


Step 2: 
Once the installation is complete, you will have the option to run a sample Laravel app. Go ahead and click the Run Laravel Sample App button.


Step 3: 
A link should now be appear, from which you can visit a page genereated by the sample laravel app. Go ahead a click on that link.


You have successfully install Laravel on your Koding VM and ran a sample Laravel app. Congrats!


That&amp;apos;s it for the Laravel on Koding Guide! Have fun!
</description>
  </item>
  
  <item>
    <title>5 Easy steps to setup Joomla on Koding</title>
    <link>//learn.koding.com/guides/joomla-kdapp</link>
    <pubDate>"2014-08-08T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/joomla-kdapp</guid>
    <author>Granger Lang</author>
    <description>What is Joomla? 
Joomla is an award-winning content management system (CMS), which enables you to build Web sites and powerful online applications. Many aspects, including its ease-of-use and extensibility, have made Joomla the most popular Web site software available. Best of all, Joomla is an open source solution that is freely available to everyone.
Getting started with Joomla on Koding is as simple as following these 5 steps!
Step 1: 
Run the Joomla Installer App from the Koding app store. [Note: you have to be 
logged into your Koding account in order to run the app.]
This is what you will see when you launch the app:


Step 2: 
When the setup is complete, a link will be appear. If you click on it, it will bring you to the main configuration page shown below. Go ahead and fill out the neccessary information.


Step 3: 
When you get to the data configuration page, enter root for Username and do NOT enter a password unless you have changed your MySQL password. Enter any database name you like.


Step 4: 
Next you will be brought to the finalization page. If you are new to Joomla, select &amp;apos;Default English (GB) Sample Data&amp;apos; and click &amp;apos;Install&amp;apos;:


Step 5: 
Congrats! Your Joomla installation is now complete! Click &amp;apos;Remove Installation folder&amp;apos; in order to be able to visit your sites:


You are now able to visit your site by clicking &amp;quot;site&amp;quot;:


After you log in, a user menu will appear on the right, from which you could access the admin site by clicking &amp;apos;Site Administrator&amp;apos;:


Here is what the admin site looks like:


After logging into the admin site, you will be brought to the control panel, where you can manage you sites:


That&amp;apos;s it for the Joomla guide! Go ahead and try it out!
</description>
  </item>
  
  <item>
    <title>3 Easy Steps to Setup Cockpit on Koding</title>
    <link>//learn.koding.com/guides/cockpit-kdapp</link>
    <pubDate>"2014-08-08T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/cockpit-kdapp</guid>
    <author>Granger Lang</author>
    <description>What is Cockpit? 
Cockpit was born out of the need of building a simple dynamic site. Sure, Wordpress, Joomla, Drupal and all the other full-stack content management systems are possible solutions for that task ... but let&amp;apos;s be honest, often they are just too bloated and too time consuming to setup, maintain and too complex implementing custom functionality. Cockpits goal is to be simple, but yet powerful and designed in that way that you can spend less time trying to squeeze your site into a theme or template.
Don&amp;apos;t waste time on setting up a cms. You need a backup? Just zip your project folder or better, combine it with versioning systems like Git. Let Cockpit manage the content, implement and reuse the content the way you want. Everything is more stress free, everything is just more simple.

Getting started with Cockpit on Koding is as simple as following these 3 steps!
Step 1: 
Run the Cockpit Installer App, which will install Cockpit and its dependencies on your VM. [Note: you have to be 
logged into your Koding account in order to run the app.]
This is what you&amp;apos;ll see when you launch the app:


Step 2: 
Once your installation is complete, a link will appear. Click on the link and you will be brought here:


Step 3: 
Next, you&amp;apos;ll be asked to enter a username and password. Enter admin for both and click Authenticate: 


That&amp;apos;s it! Start using Cockpit!

</description>
  </item>
  
  <item>
    <title>Installing PHP</title>
    <link>//learn.koding.com/guides/installing-php</link>
    <pubDate>"2014-08-06T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-php</guid>
    <author>Team Koding</author>
    <description>To install the latest version of PHP on you Koding VM you just have to input these commands in your Koding Terminal and you&amp;apos;re all good to go.
To install the latest version of PHP, use this:
sudo apt-get install php5
After that we need a library that will interact with the Apache server. You can install that using the following command.
sudo apt-get install libapache2-mod-php5
And last but not least, you need to restart the Apache server to see the changes.
sudo /etc/init.d/apache2 restart
That is all!
  Note Keep in mind that all commands require sudo access. In case you don&amp;apos;t know what&amp;apos;s your root password, read this.
</description>
  </item>
  
  <item>
    <title>Getting Started with Python</title>
    <link>//learn.koding.com/guides/getting-started-python</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-python</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over explaining what Python is, how to use Python 
Packaging via the PIP command, and how to write your first Python web 
server using a small library known as Flask. So, lets get started!
  What is Python Python is a popular, general purpose, high level programing language. It 
focuses on readability programmer sanity over raw performance. Python2 
and Python3 come pre-installed on Koding VMs, and in this guide we&amp;apos;re 
going to focus on Python2. Lets see what it looks like to run some python 
code!
  Running your first Python script Open up your Ace Editor create a new file named hello.py. Paste 
in the following code into that file.
print &amp;quot;Hello from python!&amp;quot;

The print keyword takes a string and prints it to the Standard Output 
(STDOUT) of the process. Lets try running this file so we can see this 
output, but first save the file with Ctrl-s.  Now, open up your 
Terminal and type in the following command.
python hello.py
You should see output similar to this:
joshmurray@vm-19:~$ python hello.py
Hello from python!
joshmurray@vm-19:~$
Neat! Lets take this a couple steps further, and do something actually 
useful, lets run a web server! But first, lets get to know Pip, and 
install a library that makes making python Web Applications easy!
  Installing Pip pip is a popular Python Package Manager. However, we need to install it 
onto our Koding VM to use it. To do that, we&amp;apos;re going to use AptGet, with 
the following command.
sudo apt-get install python-pip
Remember that your sudo password is your Koding Password. Give that a 
moment, and once that finishes we can install Flask!
  Using Pip to install Flask You may be wondering why we&amp;apos;re using Flask to write this little web 
server of ours. Flask has a really nice API for making compact web 
applications.  This is great for a beginner guide, since we can look at a 
few core concepts without getting too bogged down with technical details 
of a web server.
Now that you have pip installed, to install Flask type the following 
command.
sudo pip install Flask
Note that we&amp;apos;re using sudo because the default location for the 
installed packages is in a root directory. A common practice to store 
these without root permissions is to use a Virtual Environment to keep 
your packages installed per-project. We&amp;apos;ll save that for a later guide 
though.
Once that finishes installing, lets write our Flask code!
  Creating your first Flask web server Create a new file named web.py, and paste in the following code.
from flask import Flask
app = Flask(__name__)

@app.route(&amp;quot;/&amp;quot;)
def hello():
    return &amp;quot;Hello World!&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
    app.run(host=&amp;apos;0.0.0.0&amp;apos;)

There are a few interesting points in this source though, so before we 
run our web server, lets go over the source.
from flask import Flask

First up are our from and import keywords. The import imports a 
module to an object with the same name. When used with the from keyword 
though, only the Flask object is imported to the current scope. So, 
this line imports a function named Flask.
app = Flask(__name__)

Next up, we use that Flask() function to create a Flask instance, 
stored in the name app.
__name__ is a special keyword which stores the name of the currently 
module, or it equals &amp;quot;__main__&amp;quot; if run directly. We&amp;apos;ll see this again 
at the end of the script.
def hello():
    return &amp;quot;Hello World!&amp;quot;

We&amp;apos;re skipping a line, and going straight to the def keyword. This is 
how we define a function in Python. In this case, we&amp;apos;re using this 
function as a handler for our Flask &amp;quot;route&amp;quot;.
@app.route(&amp;quot;/&amp;quot;)
def hello():
    return &amp;quot;Hello World!&amp;quot;

If we look at that function again, including the line we skipped, we see 
a new syntax structure, @app.route(&amp;quot;/&amp;quot;).
This is known as a Decorator. Decorators are a special syntax for a 
function wrapping another function. If you&amp;apos;re new to programming, this 
can be a bit of a tricky concept which involves Higher Order 
Functions. We&amp;apos;ll briefly touch this below, but for now we&amp;apos;ll just 
take it at face value. This is how Flask routes our request to our 
handler.
A Route is a concept that directs requests (people viewing your web 
server) and routes them to your Handler functions. &amp;quot;/&amp;quot; is the path 
for this route, meaning that when someone connects to 
http://username.kd.io/ they are given this function.
If someone connected to http://username.kd.io/foo/bar, it would not 
return this handler, because /foo/bar does not match our hello route.
if __name__ == &amp;quot;__main__&amp;quot;:
    app.run(host=&amp;apos;0.0.0.0&amp;apos;)

Finally we&amp;apos;re at the end of the script. If you remember the __name__ 
keyword from before, remember that it holds the name of the current 
module. If the file is run directly from Python though, ie python 
web.py, then the value is &amp;quot;__main__&amp;quot;.
By writing a __name__ == &amp;quot;__main__&amp;quot; condition, we make it so that if 
this file is run directly it will start the web server. If the file is 
imported though, it will not. This is great because we don&amp;apos;t want 
imports to execute a bunch of potentially dangerous code. Good 
programming practice.
  Running our Flask web server Now that we have looked at the source, lets run this thing! We can run 
this file just like above, with..
python web.py
And then connect to it with the following address.
http://username.kd.io:5000
Flask will display our text when you request the root path, awesome!
  Decorators Briefly Explained Now that we&amp;apos;ve gone through the web server source, lets revisit the 
Decorators and go into a bit more depth. We won&amp;apos;t go over every concept 
in full detail, so that we can keep this a sanely short beginner 
tutorial, and not a book.
To help explain decorators, lets add our own Decorator.
def from_py(hello):
  def wrapper(*args, **kwargs):
    return hello(*args, **kwargs) + &amp;quot; From Python!&amp;quot;
  return wrapper

@app.route(&amp;quot;/&amp;quot;)
@from_py
def hello():
    return &amp;quot;Hello World!&amp;quot;

Lets analyze this.
from_py is simply a function, that takes another function. When we add 
the keyword before of a function def, from_py is called with that 
function as the first argument. This &amp;quot;wraps&amp;quot; hello() with our 
from_py() function.
Next, we create a new function inside the from_py function that acts as a handler.
The (*args, **kwargs) 
parameters is a special syntax to keep all of the given arguments in 
those two objects, so that we can fully pass them to the hello() 
handler.
In our wrapper function, we then call then hello() function, with 
the arguments given to wrapper().
When hello() returns, we add our own string &amp;quot; From Python!&amp;quot;, and 
return that as well.
So that means
@app.route(&amp;quot;/&amp;quot;)
@from_py
def hello():
    return &amp;quot;Hello World!&amp;quot;

Is actually many functions, more than three. We could write out the 
entire structure here, but just focus on the @from_py for now, as to 
avoid being confused by a huge group of nested functions.
If this still doesn&amp;apos;t make sense, don&amp;apos;t worry! Higher order functions can 
take some getting used to. Practice them, and make your own, they&amp;apos;re well 
worth understanding!
  Python2 vs Python3 Finally, a Python talk is never complete without wrapping everything up 
in a big Python2 vs Python3 debate! .. Luckily, we won&amp;apos;t do that here.
If you&amp;apos;re new to Python, and unsure which version to use, it doesn&amp;apos;t 
really matter. They&amp;apos;re both quite similar, pick one, and learn it. Once 
you learn one, the other version will be easily usable, and you&amp;apos;ll be 
able to spot the differences with ease.
Python3 is the eventual future, but it&amp;apos;s taken many years to gain 
traction, and will take many more. Choosing which to use can be a hard 
decision for seasoned programmers wanting to write large code bases. You 
shouldn&amp;apos;t worry about that, currently. Save that for another day :)
This concludes the getting started with Python guide. Thanks for reading!
</description>
  </item>
  
  <item>
    <title>Author A Guide: Overview and Guidelines</title>
    <link>//learn.koding.com/contribute/guidelines</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/contribute/guidelines</guid>
    <author>Team Koding</author>
    <description>When submitting guides to Koding University you must understand the 
document structure, as well as writing styles. Guides on Koding 
University should be formatted in a similar style and tone. This guide 
will outline some guideliness for guide submissions to adhere to.
Note that while these should be taken as best practices more than 
absolute law, submissions may be rejected if they deviate too far from 
the guidelines.
  What is Koding University? Koding University is an Open Source, statically generated site.  Each 
document is stored as Markdown files found in the KDLearn 
Repository. The actual implementation code is hidden in the 
dotfile directory named .metalsmith. We&amp;apos;ll go over this directory in 
the Previewing guide.
  File Structure By keeping the content in the main directory, and hiding the 
implementation, the file structure becomes content first. Meaning 
that at the root of the repo you see the actual content structure. You do 
not need to know how to compile the site, or any real implementation 
details, just write markdown!
As an example, lets look at the markdown file that you&amp;apos;re reading now.If you look at the repo, you&amp;apos;ll see a file named 
contribute/guidelines.md. This file compiles to 
http://learn.koding.com/contribute/guidelines/index.html. Notice how 
the path contribute/guidelines is the same for the source and output 
html? Below are a few more examples.

./contribute/index.md becomes
http://learn.koding.com/contribute/index.html
./guides/markdown.md becomes
http://learn.koding.com/guides/markdown/index.html
./faq/one-more-step.md becomes
http://learn.koding.com/faq/one-more-step/index.html
./guides/your-new-guide.md becomes
http://learn.koding.com/guides/your-new-guide/index.html

See the pattern? Each file can be accessed from the same name on the 
website, minus the .md. ./foo.md becomes /foo on the website.
That means if you add a file, either markdown or image, it will be 
added to the site with the same location relative to the project root.It&amp;apos;s not hidden away in some obscure and complicated file structure, what 
you see in markdown is what shows up on the site. Content first.
  Recommended URL Structure Now that you understand the File Structure and how it correlates to the 
generated URL, we recommend that you adhere to the following naming 
conventions for your document URLs.

Guides should be within the kdlearn/guides directory.
Your filename should describe your guide in clear wording.
Be concise. Try not to have more than 5 words for a filename.
No special characters. Plain words and hyphens only. Example: 
foo-bar-baz.md.

  Title and Description A guide&amp;apos;s title and description are also very important to the document.These will be how people find your guide.
The title is your Markdown Header 1. It should be similar to the URL, 
concise, no more than 7 words.
The description is the first paragraph of your guide, directly following 
the Markdown Header (title). Explain what the guide is about, and what 
the technologies being explained are. Keep it to a single paragraph.
  Headers are awesome, use them. Headers are a great way to separate content sections. They stand out, can 
be linked to directly, and have levels built into them without nesting 
indentation.
These are preferred over ordered lists for larger sections. Ordered lists 
are great for small steps, headers are great for larger steps / 
instructions.
Don&amp;apos;t forget, headers with levels (## Header1, ### Header 3, and so 
forth) should be used to group content just like you do with HTML&amp;apos;s 
&amp;lt;h2&amp;gt;s and so forth. You can review Header Markdown here
</description>
  </item>
  
  <item>
    <title>Author A Guide</title>
    <link>//learn.koding.com/contribute</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/contribute</guid>
    <author>Team Koding</author>
    <description>In this guide series we will go over Writing and Editing guides for Koding 
University. We will cover every step of the process, but basic Git, 
Github, and Markdown knowledge will be very useful.
If you already know git, github, and markdown, here is the simple set of 
tasks you&amp;apos;ll need to do.

Review the Style Guidelines
Fork KDLearn
Clone your forked repo
Find or create your files, Make your markdown edits
Commit and push your changes to your repo
Make a pull request of your changes, against the KDLearn Repo

If you need more in depth instructions than that, please continue with 
this series below. Thanks!
</description>
  </item>
  
  <item>
    <title>Getting Started: Editing Your Profile</title>
    <link>//learn.koding.com/guides/getting-started/editing-your-profile</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started/editing-your-profile</guid>
    <author>Team Koding</author>
    <description>Your Koding profile is your public information page on Koding. Currently it 
shows your Avatar, Name and Description, recent Koding activity, and in the 
near future Badges and additional social information. In this guide we&amp;apos;ll go 
over the basic usage of your Koding profile.
  Getting to your Profile When you first sign up to Koding you&amp;apos;ll be presented with the Koding Activity 
Feed (as we previously discussed). To find your profile, look in the upper 
right of Koding, as highlighted below.

Clicking on it will navigate you to your profile.
  Avatar, Name and Description When viewing your profile for the first time, you&amp;apos;ll see that your first name 
is set to your Koding username, and your last name and description are grey 
text, as seen in the below image.

If you double click on this grey text, you can edit that field.
Likewise, if you double click on your Avatar, a window will pop up enabling you 
to change your avatar. If you have one, Koding will use your 
Gravatar by default, but the Edit UI also supports avatar uploads 
directly to Koding.

To make this process even easier, you can use the Take Photo button to use 
your Laptop&amp;apos;s camera and take a photo right then and there!
  Followers, Following, and Likes Below the editable profile section is a little bit of information about your 
activity on Koding.

As previously discussed in the Activity Feed guide, Following someone allows 
you to subscribe to the content they post to the feed. The Followers number 
shows how many users you are currently following.
Following on the otherhand, shows how many people are following you. Finally, 
Likes show how many of your Activity Feed submissions have been liked by Koding 
users.
  Badges Badges are a soon to come feature which will display achievements for your 
Koding experience.
The only current badge is the Staff badge. If you see that badge in a user&amp;apos;s 
profile, they are a Koding Staff member. You&amp;apos;ll see this quite frequently, and 
Koding takes pride in that.
This wraps up your Koding profile. In future Getting Started guides we&amp;apos;ll be 
discussing all things about Koding, so stay tuned!
</description>
  </item>
  
  <item>
    <title>Author A Guide: Previewing</title>
    <link>//learn.koding.com/contribute/previewing</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/contribute/previewing</guid>
    <author>Team Koding</author>
    <description>While you shouldn&amp;apos;t need to preview your guides, since Markdown is 
designed to be human friendly in the source, if you insist you can 
preview your guides as they are on Koding University. This guide will go 
over that process. Note that this will require a bit of developer 
know-how, so be prepared to get your hands dirty. Lets get started!
  Requirements You will need a working NodeJS installation to compile the Koding 
University source. If you do not, visit the NodeJS downloads 
page and grab the installer.
  Installation With a working NodeJS installation, we need to install the KU 
dependencies, as well as a global installation of the GulpJS. This can be 
done with the following code:
npm install -g gulp
cd .metalsmith
npm install
  Building With Gulp installed, simply run the following command, to compile the 
entire project into HTML.
(Ignore cd .metalsmtih if you&amp;apos;re already in that directory)
cd .metalsmith
gulp
The .metalsmith/build directory will contain all of the compiled html, 
css, and any static resources (such as images/etc) from the markdown 
directory.
Compiling can take 1-2 minutes, so be patient.
  Previewing If you want to preview the compiled site, open a new Koding Terminal tab 
and run the following:
(Ignore cd .metalsmtih if you&amp;apos;re already in that directory)
cd .metalsmith
gulp preview
This will run a small HTTP Server on Port 8000, ie: 
http://you.kd.io:8000. Keep this tab open, and in  a different 
Koding Terminal tab run your gulp command from above.  Each time you 
compile the site, this will show your compiled site.
  Compiling as you type To have your Markdown compiled as you write your documents, run the 
following commands:
(Ignore cd .metalsmtih if you&amp;apos;re already in that directory)
cd .metalsmith
gulp watch
This, in combination with the preview command above, will compile the 
site each time you change the Markdown.
Note that if you add images for your guide to use, you&amp;apos;ll want to run the 
full gulp command again.
And that sums it up! You now know how to contribute to Koding University, 
in multiple ways. Keep up the awesome work, and we look forward to your 
contribution!
</description>
  </item>
  
  <item>
    <title>Author A Guide: Basic</title>
    <link>//learn.koding.com/contribute/basic</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/contribute/basic</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over how to contribute to the Koding University 
the easy way. We&amp;apos;ll be using Github&amp;apos;s built in editor, to make the 
forking &amp;amp; merging process easy. If you&amp;apos;re unfamiliar with Git, but you 
still want to contribute to Learn, this is the guide for you. So, lets 
get started!
  Edit on Github Each Koding guide comes with a simple &amp;quot;Edit this on Github&amp;quot; link. This 
link directs you back to a file editor on Github. Github will 
automatically fork the repo if you have not yet, and even create a branch 
so that your eventual pull request does not cause any unintended 
contributions. Lets look at how this works.
First up, find the guide that you want to edit, and look for the 
Improve this Guide button at the bottom of all guides.

  Fork the Repository If you have not contributed before you likely do not have the repository 
forked yet. Press the green button seen below, and Github will fork the 
repository for you.

  Make your Edits After forking, or if you already had Koding University Forked, you&amp;apos;ll be 
presented with a text editor for the guide that you chose to edit. From 
here, look through the guide and make your edits as you desire.

Don&amp;apos;t forget that there is a preview tab as well. The guide will look 
slightly different on Github than on Koding University; but because 
everything is formatted in Markdown you can preview it Github to ensure 
the correctness of your markdown syntax.
  Propose File Changes After you have made your edits to the document, scroll down and enter a 
title and description for the edits you&amp;apos;ve made. After you&amp;apos;re satisfied, 
press Propose file change.

This will create a new branch of your Fork and store your changes into 
that branch. To repeat, your changes have been added to your Fork, 
not to the official Koding University repository yet. To do that, you 
need to create a Pull Request.
  Create Pull Request A pull request lets Koding Staff review and merge your changes into the 
official repository. To do that, after proposing your file changes you 
will see a page like the one below.

This is your branch, on your forked repository. If you press the Create 
Pull Request button, your changes in that branch will be sent to the 
official repository to be reviewed and merged in.
This is it! You&amp;apos;ve gone from the guide on University, to editing it and 
submitting your changes for review, all without leaving your browser or 
using any complex Git commands.
  Creating a New Guide The above process is nice and simple, but there&amp;apos;s one core thing missing. 
We didn&amp;apos;t create a guide, we only edited a guide. What if we want to 
create a new guide? Luckily this Basic workflow also works with new 
guides! Lets go over that real quick.
First, click here. That link will send you to the Github 
editor with no file loaded. You can write in the editor, add a file name, 
and propose changes just like the above instructions. Remember to name 
your file with the .md extension, and adhere to the 
Guidelines.
Because you&amp;apos;re creating a new file though, you want to make sure and add 
the proper metadata to the file. Copy the following code, and place it 
into the editor.
---
author: Your Name
username: yourUsername
date: 2014-07-31
categories: [nginx]
---

Fill in Your Name with your name, and yourUsername with your Koding 
Username. The date field should be formatted in YYYY-MM-DD format, and 
the categories list is just a comma separated list of strings.

Once that&amp;apos;s all taken care of, start writing your guide! Once you&amp;apos;re 
done, follow the Propose and Pull Request instructions above, as they are 
identical.
You should note that with this method, you cannot add images to the 
repository. For that to work, have a look at the next section which uses 
Koding&amp;apos;s Editor and Git to make changes to this Koding University.
</description>
  </item>
  
  <item>
    <title>Django Guide</title>
    <link>//learn.koding.com/guides/django-kdapp</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/django-kdapp</guid>
    <author>Granger Lang</author>
    <description>To install Django on Koding, run the Django Installer App. [Note: you have to be 
logged into your Koding account in order to run the app.]

This is what you&amp;apos;ll see when you launch the app:


Once your installation is complete, click &amp;quot;Run Django&amp;quot; to start your Django development server.  


A link should be presented after you click the button. Go ahead and click on the link.


You will now be brought to your first Django-powered page!


Ready to build a Django app? Check out the Django documention to continue your adventure into the land of Django!
</description>
  </item>
  
  <item>
    <title>Getting Started with ExpressJS</title>
    <link>//learn.koding.com/guides/getting-started-expressjs</link>
    <pubDate>"2014-08-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-expressjs</guid>
    <author>Team Koding</author>
    <description>In this guide we will go over basic usage of the NodeJS web framework, 
ExpressJS. If you are not familiar with NodeJS, please review the 
Getting Started with NodeJS guide. Lets get 
started!
  Installing First, make a directory to follow along with this tutorial, and work from 
in that directory. Next, we&amp;apos;re going to install Express with the 
following command.
npm install express
If you already have a package.json file for your project, you can add 
the --save flag and Express will be added as a project dependency. In 
this example we&amp;apos;re going to ignore dependencies for simplicity.
You&amp;apos;ll notice a new directory is created named node_modules. This is 
where the local installations of your packages are stored. When you 
import them, such as with require(&amp;apos;express&amp;apos;), they are loaded from this 
directory.
  Hello World and Routes Copy the following code into a file named app.js. Remember that at 
anytime you can run your server with node app.js.
var express = require(&amp;apos;express&amp;apos;);
var app     = express();

app.get(&amp;apos;/&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello World, From /&amp;apos;);
});
app.get(&amp;apos;/:name&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello &amp;apos;+ req.params.name);
});

var server = app.listen(3000, &amp;apos;0.0.0.0&amp;apos;, function() {
  console.log(&amp;apos;Listening on port %d&amp;apos;, server.address().port);
});

Lets go over each section real quick.
app.get(&amp;apos;/&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello World, From /&amp;apos;);
});
app.get(&amp;apos;/:name&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello &amp;apos;+ req.params.name);
});

The app.get() method takes a Route (string or regex) to listen to 
requests on. If a user visits http://username.kd.io/, they are greeted 
with Hello World, From /.
If someone visits http://username.kd.io/john, they are greeted with 
Hello john. :name is a URL parameter, which is sort of like a 
wildcard for that section of the URL. Respond to the request with the 
parameter by using the name of the parameter on the req.params object.
var server = app.listen(3000, &amp;apos;0.0.0.0&amp;apos;, function() {
  console.log(&amp;apos;Listening on port %d&amp;apos;, server.address().port);
});

This final call simply starts the web server on 0.0.0.0:3000.
  Middleware We saw how to run a simple server, with a couple routes, now lets add a 
bit of middleware.
Middleware is a concept of a function which is called in the middle of 
the request cycle. It&amp;apos;s useful for rejecting non-authorized users to many 
routes, logging, or just about anything. Middleware is pretty awesome.
Lets add our own middleware to simply log all requests to the console, 
and another to log all /:name requests from above.
app.use(function(req, res, next) {
  console.log(&amp;apos;[&amp;apos;+ new Date() +&amp;apos;] &amp;apos;, req.path);
  next();
});

var logName = function(req, res, next) {
  console.log(&amp;apos;Request to &amp;apos;+ req.params.name);
  next();
}

We&amp;apos;ve defined two middleware functions above. Our logging function is 
first, and we immediately pass it to app.use(). Every request that this 
express application receives will first go through this logging function.The logging function just logs the date time, and the path of the 
request. Note the next() callback, that tells Express that this 
middleware is done, and the next one can be called.
Our second middleware, logName, is not being used yet. Why? Well, we 
only want to use this for our /:name route, because it&amp;apos;s supposed to 
log names. How can we achieve this though? Lets take a look at our 
/:name route, with the middleware added.
app.get(&amp;apos;/:name&amp;apos;, logName, function(req, res){
  res.send(&amp;apos;Hello &amp;apos;+ req.params.name);
});

By adding this middleware to our route, every request to /:name will 
first pass through our logName function, and then the final anonymous 
function to handle the full response.
Lets look at the full code at this state.
var express = require(&amp;apos;express&amp;apos;);
var app     = express();

app.use(function(req, res, next) {
  console.log(&amp;apos;[&amp;apos;+ new Date() +&amp;apos;] &amp;apos;, req.path);
  next();
});

var logName = function(req, res, next) {
  console.log(&amp;apos;Request to &amp;apos;+ req.params.name);
  next();
}

app.get(&amp;apos;/&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello World, From /&amp;apos;);
});
app.get(&amp;apos;/:name&amp;apos;, logName, function(req, res){
  res.send(&amp;apos;Hello &amp;apos;+ req.params.name);
});

var server = app.listen(3000, &amp;apos;0.0.0.0&amp;apos;, function() {
  console.log(&amp;apos;Listening on port %d&amp;apos;, server.address().port);
});

Note: It&amp;apos;s important to remember that order of execution matters! If 
we define a piece of middleware after a route, requests to that route 
will not run through that middleware. In the above example, the very 
first thing we do is declare our app.use() middleware, and in the 
/:name middleware we use the logName function before our handler.
  Adding Templates Now we&amp;apos;re getting a hang of routes and middleware, lets complete the step 
and add in a template. Add the following code to the top of your app.js 
file.
app.set(&amp;apos;view engine&amp;apos;, &amp;apos;jade&amp;apos;);
app.set(&amp;apos;views&amp;apos;, __dirname + &amp;apos;/views&amp;apos;);

app.set() is used to configure this app instance. In this case, we set 
a couple templating settings of Express, to use the Jade templating 
language from the ./views directory.
Next, create a directory named views, and add the following code to a 
file named index.jade
doctype
html
  head
    title Hello #{name}
  body
    h1 Hello #{name}

We won&amp;apos;t go over the Jade language here, but in short #{name} is a 
variable which is being passed to this template when we render it. If 
you&amp;apos;re paying attention, you&amp;apos;ll notice that we have yet to actually 
render a template in our requests. Lets add the above template to our 
/:name handler!
app.get(&amp;apos;/:name&amp;apos;, logName, function(req, res){
  res.render(&amp;apos;index&amp;apos;, {name: req.params.name});
});

In our /:name handler, we&amp;apos;ve replaced the res.send() call with 
res.render(). This loads our index.jade template and renders it, with 
the object we&amp;apos;re passing in as data. The name property of that object 
is accessible from the jade template!
  The final product Lets take one final look at all of this app.js code together.
var express = require(&amp;apos;express&amp;apos;);
var app     = express();

// Set our view engine to Jade, and the view directory
app.set(&amp;apos;view engine&amp;apos;, &amp;apos;jade&amp;apos;);
app.set(&amp;apos;views&amp;apos;, __dirname + &amp;apos;/views&amp;apos;);

// Enable our custom Logging middleware
app.use(function(req, res, next) {
  console.log(&amp;apos;[&amp;apos;+ new Date() +&amp;apos;] &amp;apos;, req.path);
  next();
});

// Our logName middleware, which can be used in any route we want.
var logName = function(req, res, next) {
  console.log(&amp;apos;Request to &amp;apos;+ req.params.name);
  next();
}

// Our two routes and handlers
app.get(&amp;apos;/&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello World, From /&amp;apos;);
});
app.get(&amp;apos;/:name&amp;apos;, logName, function(req, res){
  res.render(&amp;apos;index&amp;apos;, {name: req.params.name});
});

// Finally, start our web server.
var server = app.listen(3000, &amp;apos;0.0.0.0&amp;apos;, function() {
  console.log(&amp;apos;Listening on port %d&amp;apos;, server.address().port);
});

Run the above code with node app.js, and visit
http://username.kd.io/Josh
And you&amp;apos;ll see an html page, rendered from your awesome new Express app!
And that&amp;apos;s it! We&amp;apos;ve gone through what express is, how to set it up, 
routes, middleware, and finally templates. Thanks for reading!
</description>
  </item>
  
  <item>
    <title>Ghost Blog Installation</title>
    <link>//learn.koding.com/guides/ghost-installation</link>
    <pubDate>"2014-08-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/ghost-installation</guid>
    <author>Team Koding</author>
    <description>In this article we will go over the installation process for the awesome 
new blogging software, Ghost. Installation is quick 
and easy, and just requires a few configuration edits, making this great 
for beginners. So, lets get started!
  What is Ghost? Ghost is an awesome new blog software written with &amp;#x201C;Just Blogging&amp;#x201D; in 
mind. Think WordPress without the complexity, bringing blogging back to 
it&amp;#x2019;s roots, so to say. This is all well and good, but with any product 
that is so new there is always confusion on how to install, develop, and 
run it.
So lets try and resolve some of that confusion. Lets go over the simple 
process of setting up Ghost on Koding so you can 
learn it, toy with it, develop with it, and create your Ghost blog to be 
exactly what you want.
  Downloading Ghost We&amp;apos;re going to use the Koding Terminal to download Ghost, so 
visit the [Ghost Download][download-page] and look for the download link.Copy the url.
At the time of writing this guide, the download url is: 
https://ghost.org/zip/ghost-0.4.2.zip (This version is likely 
outdated, please visit the download page and get the most updated link.)
Now, go to your Terminal and type in the following commands.
mkdir ghost
cd ghost
wget [ghost-zip-url]
Replace [ghost-zip-url] with the full URL of the zip file that you 
copied above.
  Unzipping Ghost The download is in zip format, so we need to unzip it. Type in the 
following command.
unzip [ghost-zip-name]
  Installing Dependencies Next, we need to install the dependencies.
npm install --production
This step will take a minute or two.
  Edit the config Next up, open up the Ace Editor and double click your ghost 
directory to expand it. Right click, and rename, the config.example.js 
file to config.js.
On line 36, look for the following section:
        server: {
            // Host to be passed to node&amp;apos;s `net.Server#listen()`
            host: &amp;apos;127.0.0.1&amp;apos;,
            // Port to be passed to node&amp;apos;s `net.Server#listen()`, for 
iisnode set this to `process.env.PORT`
            port: &amp;apos;2368&amp;apos;
        },

Replace 127.0.0.1 with 0.0.0.0, and change the Port to whichever 
you&amp;apos;d like to use. Save the file with Ctrl-s.
  Starting Ghost Go back to your Terminal and type in the following command to 
start your Ghost Blog.
npm start
Note: If you had previously closed your Terminal, you&amp;apos;ll need to navigate 
into the ghost directory again, with cd ghost.
  Visiting your Ghost Blog Now open up a new tab and visit your Ghost Blog on your Koding domain at 
the following address.
http://username.kd.io:port
Where username is your Koding username, and port is the port you 
chose above.
If you navigate to the following address, you can signup as Admin to your 
Ghost installation.
http://username.kd.io:port/ghost
  Running Ghost on Port 80 If you&amp;apos;d like to run Ghost on the default Port 80, you&amp;apos;ll have to Stop 
Apache, and start Ghost with sudo. Here are the commands to do this.
sudo service apache2 stop
sudo npm start
Remember that yuor Sudo password is the password you signed up to Koding 
with. This should be typed from the Ghost installation directory.
And that&amp;apos;s it! You should now have a Ghost installation up and running.Happy Blogging!
</description>
  </item>
  
  <item>
    <title>Getting Started with NodeJS</title>
    <link>//learn.koding.com/guides/getting-started-nodejs</link>
    <pubDate>"2014-08-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-nodejs</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over explaining what NodeJS is, what it can do, 
and how to write your first NodeJS web server on Koding. We&amp;apos;ll be 
approaching everything from a beginners perspective. So, lets get 
started!
  What is NodeJS NodeJS, commonly called Node, is a program which runs JavaScript code on 
a computer. This is similar to your browser, except instead of having 
access to the Document Object Model (DOM) and HTML5 APIs, it has access 
to a Node specific API which gives you access to the file system, and raw 
networking.
JavaScript run in Node is very similar to Python or Ruby. You have a 
command node, which runs some JavaScript code. This code uses the Node 
API to modify the file system, or send/receive network packets. It&amp;apos;s 
rather low level by itself, but like all major languages people have 
built frameworks ontop of the raw API to make it easier to create 
applications.
  Running your first Node Script Lets setup a single print line script, and call it. Open up your Ace 
editor, and open up a new file by pressing the Plus Button on the 
tab list. If your file says Untitled.txt, you&amp;apos;re good to go.
Next, paste the following code into a new script.
console.log(&amp;apos;Hello from NodeJS!&amp;apos;)

If you&amp;apos;re familiar with Web Development, you&amp;apos;ll likely notice that this 
line if code is identical to what you could use in your Browser. You can 
copy this code and run it in your Browser Console right now! This works, 
because the JavaScript running in Node is just javascript. No 
modifications to the language have been made. The differences come when 
we start using the Node API, which we&amp;apos;ll see when we run our web server 
below.
Before we run a web server though, lets see the output of our script.  We 
haven&amp;apos;t saved our file yet though, so use Ctrl-S to save the file, 
and name it hello.js. Finally, open up the Koding Terminal 
and run this file with the following code.
node hello.js
You should see output similar to this:
joshmurray@vm-19:~$ node hello.js
Hello from NodeJS!
joshmurray@vm-19:~$
Not surprisingly, it printed our console.log() output! Next up, lets 
get out feet wet with a little bit of the API known as the http 
library.
  Running your first Node Web Server var http = require(&amp;apos;http&amp;apos;);

var server = http.createServer(function(req, res) {
  res.end(&amp;apos;Hello from NodeJS!\n&amp;apos;);
  console.log(&amp;apos;Someone visited our web server!&amp;apos;);
})

server.listen(3000, &amp;apos;0.0.0.0&amp;apos;);
console.log(&amp;quot;NodeJS web server running on 0.0.0.0:3000&amp;quot;);

Just like in the steps above, open a new file, paste in the above code, 
and save it as web.js. Lets break down this code piece by piece before 
we run it.
var http = require(&amp;apos;http&amp;apos;);

This line is how NodeJS &amp;quot;Imports&amp;quot; modules. Each NodeJS file is considered 
a module, and can be imported by specifying the file location relative to 
the path of the current file.
Eg, require(&amp;apos;./foo&amp;apos;) would import a file named foo.js in the current 
directory. require(&amp;apos;./foo/bar&amp;apos;) would import a file named bar.js in 
the foo directory.
You should note that there is a difference between our relative imports, 
and the http import above. If you install a library with npm, or use 
built-in libraries like http, you do not need to specify the path. Node 
will look up your file path until the package is found, or return an 
error if it fails to find it. http is part of the Standard Library, so 
of course it is found.
After require(&amp;apos;http&amp;apos;) loads the module, we store it in a variable named 
http
var server = http.createServer(function(req, res) {

Here, we call a function createServer on the http module. I won&amp;apos;t go 
into too much detail of the usage of function, but in short it takes a 
function and passes in a Request and Response object to the function. For 
further reading, checkout the documentation on 
createServer().
This function creates a web server, stored in server in our example.Each time a request comes in to our server, our function is called with 
the req (Request) and res (Response) of the current request. We 
can get information about the request, and create a response for the 
requester.
  res.end(&amp;apos;Hello from NodeJS!\n&amp;apos;);
  console.log(&amp;apos;Someone visited our web server!&amp;apos;);

In this example, we&amp;apos;re calling res.end() to end the current request. We 
pass in a string, to be given to the client.
We also make a console.log() call, so that in our Terminal we can see 
when people request our web server.
server.listen(3000, &amp;apos;0.0.0.0&amp;apos;);
console.log(&amp;quot;NodeJS web server running on 0.0.0.0:3000&amp;quot;);

Finally, we call the server.listen() function. This takes a port, and 
an IP to listen on. When called, it starts the server we defined above.Meaning that any requests that are made to that address (relative to the 
machine), 0.0.0.0:3000 calls our above function, which we then end 
with Hello from NodeJS!.
Lets try this out now, and run it. Just like before, with the file saved 
type node web.js (remember, we named this one web.js). Once it&amp;apos;s 
running, open up your browser and go to
http://username.kd.io:3000
Where username is your Koding Username.
After you visit your that address, you should see a simple web response 
with the Hello from NodeJS! string. If you then go back to the 
Terminal, you&amp;apos;ll see that the server logged a visit. If you refresh your 
web page a few times, you can watch your web server respond to each 
request!
NodeJS web server running on 0.0.0.0:3000
Someone visited our web server!
This sums up the Getting Started with NodeJS guide. You should now have a 
good understanding of what Node is, from a very basic perspective. As 
always, don&amp;apos;t forget to look at the API Documentation. Have 
fun with Node!
</description>
  </item>
  
  <item>
    <title>Koding with Sublime Text</title>
    <link>//learn.koding.com/guides/koding-with-sublime-text</link>
    <pubDate>"2014-07-31T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/koding-with-sublime-text</guid>
    <author>Granger Lang</author>
    <description>This guide will show you how to connect your Koding VM with Sublime Text via SFTP.
  What you will need 
Set up SSH on your Koding account: http://learn.koding.com/guides/ssh-into-your-vm/
Your Koding username
Your Koding VM Number
Sublime Text 2 or 3

  Getting Down to Business 
Download Package Control and use the Package Control: Install Package command from the command palette. The command palette is opened via ctrl+shift+p on Windows and Linux, and cmd+shift+p on OS X.


Once you run the Package Control: Install Package command, a list of packages will appear. Type in SFTP and hit enter. Using Package Control ensures Sublime SFTP will stay up to date automatically.


Open the folder that you want to sync with your VM using Sublime Text


Right click the folder in the sidebar and select SFTP/FTP -&amp;gt; Map to Remote


You should now see sftp-config.json opened.


Configure your sftp-config.json file and save it.
&amp;quot;host&amp;quot;: &amp;quot;&amp;lt;vm-number&amp;gt;.&amp;lt;username&amp;gt;.koding.kd.io&amp;quot;,
&amp;quot;user&amp;quot;: &amp;quot;&amp;lt;username&amp;gt;&amp;quot;,
&amp;quot;password&amp;quot;: &amp;quot;&amp;lt;koding_password&amp;gt;&amp;quot;,
//&amp;quot;port&amp;quot;: &amp;quot;22&amp;quot;,

&amp;quot;remote_path&amp;quot;: &amp;quot;/home/&amp;lt;username&amp;gt;/&amp;quot;,

Modify the other configurations if you wish. I personally find the option to upload_on_save very handy.


Right click the folder, select SFTP/FTP. You will now see many more options than before.


(IMPORTANT) Chose whether you want to Sync Local -&amp;gt; Remote or Sync Remote -&amp;gt; Local. Be very careful about which you choose.
Sync Local -&amp;gt; Remote overwrites what you have in your remote directory that you specified in you sftp-config.json file with what you have in your local directory.
Sync Remote -&amp;gt; Local overwrites what you have in your local directory with what you have in your remote directory that you specified in you sftp-config.json file.


(IMPORTANT) Check what is about to be performed in the box below before confirming your actions!


And there you have it, a folder synced with your Koding VM.



</description>
  </item>
  
  <item>
    <title>Installing Nginx</title>
    <link>//learn.koding.com/guides/nginx</link>
    <pubDate>"2014-07-31T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/nginx</guid>
    <author>Team Koding</author>
    <description>Nginx is an open source proxy server, commonly used as a replace
Nginx is an open source web server. Built with performance and memory usage in 
mind, it&amp;apos;s an excellent alternative to Apache. In this guide, we&amp;apos;ll go through 
the simple process of installing Nginx on Koding. Lets get started!
  Installing Nginx Koding runs Ubuntu, gives you root, and of course comes with apt-get. This 
means that installation of many packages, programs and servers simply require 
using apt-get. To install Nginx with apt-get, run the following command.Remember, your sudo password is your Koding password.
sudo apt-get install nginx
Confirm the installation by pressing enter at the [Y/n] prompt, and proceed 
to the next step.
  Starting Nginx Your Virtual Machine comes with Apache preinstalled and configured. It&amp;apos;s what 
serves up the web page that you see when you visit http://username.kd.io. So 
before we start Nginx, we have to stop Apache with the following command.
sudo service apache2 stop
You can then start your Nginx server by using the following command.
sudo service nginx start
If you now visit your User (or VM) domain at http://username.kd.io, you&amp;apos;ll 
see a welcome to nginx page like the one below. This means your Nginx server is 
up and running.

  Using ~/Web Your Nginx server is running, but it&amp;apos;s not serving up the files that you expect 
from your ~/Web directory. To do this we need to edit out 
/etc/nginx/sites-available/default file with a Terminal editor such as Nano 
or Vim. In this example we&amp;apos;ll use Nano for simplicity.
Open up your Terminal and run the following command.
sudo nano /etc/nginx/sites-available/default
You&amp;apos;ll see a bunch of green text, similar to the following image. What we&amp;apos;re 
looking to edit is the text root /usr/share/nginx/html, as seen highlighted 
in this image:

Using your arrow keys, navigate to the end of the /usr/share/nginx/html text 
and delete the entire folder name (with your backspace key). Replace it with 
the folder /var/www.
    root /var/www
By doing this, you&amp;apos;re changing the directory of files that nginx is serving by 
default. /var/www is the default Apache dir, and is soft-linked to ~/Web. 
In short, we&amp;apos;re telling Nginx to use what we currently use.
After you&amp;apos;ve made the appropriate edits, use Ctrl-X to close Nano. You&amp;apos;ll be 
prompted with a Y/n question to save the file. Type y. Next you&amp;apos;ll be 
prompted for the filename to save it, press Enter, as the filename field is 
already filled out.
Now all we have to do is restart our web server!
sudo service nginx restart
If you visit your domain again you&amp;apos;ll see the same ~/Web files that you are 
familiar with. You now have an Nginx server up and running, and serving your 
Web files. Enjoy!
</description>
  </item>
  
  <item>
    <title>Installing mySQL</title>
    <link>//learn.koding.com/guides/installing-mysql</link>
    <pubDate>"2014-07-30T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-mysql</guid>
    <author>Team Koding</author>
    <description>In this guide we will cover the basics on how you can install MySQL and the latest version of PHP-MySQL modules on your Koding VM. Please note, MySQL is installed by default on your Koding VM so install MySQL only if you have either uninstalled it or if your MySQL install is not working. This guide describes how to configure/operate your existing default install of MySQL.
To proceed with the installation of MySQL, follow these stpes:
First you you&amp;apos;ll need to install/ the MySQL server and client using the following command:
sudo apt-get install mysql-server mysql-common mysql-client
When asked for the password, enter the root password. Keep in mind that the root password is your Koding password.
We then need to reload the configuration for MySQL to work properly.
sudo initctl reload-configuration
In order to start the MySQL server you need to input the following command. This will start MySQL as a service on your VM.
sudo service mysql start
After you are finished with MySQL you need to install the MySQL extension(s) for PHP. You can do this using the following command:
sudo apt-get install php5-mysql
The last step is to restart the Apache server. This will ensure all your configuration are now live and thus you can put them to good use.
sudo /etc/init.d/apache2 restart
That&amp;apos;s it!
</description>
  </item>
  
  <item>
    <title>5 Easy steps to getting started with Drupal on Koding</title>
    <link>//learn.koding.com/guides/drupal-kdapp</link>
    <pubDate>"2014-07-30T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/drupal-kdapp</guid>
    <author>Granger Lang</author>
    <description>What is Drupal?
Drupal is an open source content management platform powering millions of websites and applications. It&amp;#x2019;s built, used, and supported by an active and diverse community of people around the world. Learn more.
Getting started with your own Drupal environment on Koding is as simple as following these 5 easy steps!
Step 1: 
To install Drupal on Koding, run the Drupal Installer App. [Note: you have to be 
logged into your Koding account in order to run the app.]

This is what you&amp;apos;ll see when you first launch the app from the Koding App Store. The app does the work to install all the required software and its dependencies.


Step 2: 
Once the setup is complete, the presented link will bring you to the Drupal installation profile selection page as shown below:


Step 3: 
Next, select the language shown. By default, there&amp;apos;s only one choice. We recommend leaving it to English so that you can proceed with the install. You can change the language at a later stage once the installation is completed.


Step 4: 
You will then be brought to the database configuration page. When prompted, enter the following:
Database name: drupal_db
Database username: root


Step 5: 
Next, you will be brought to the site configuration page:


Your drupal installation is now complete:


Here is what you will see when you visit your new Drupal powered test site!


That&amp;apos;s it for the Drupal on Koding guide! Have fun!
</description>
  </item>
  
  <item>
    <title>CodeIgniter Guide</title>
    <link>//learn.koding.com/guides/codeigniter-kdapp</link>
    <pubDate>"2014-07-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/codeigniter-kdapp</guid>
    <author>Granger Lang</author>
    <description>To install CodeIgniter on Koding, run the CodeIgniter Installer App. [Note: you have to be 
logged into your Koding account in order to run the app.]

This is what you&amp;apos;ll see when you launch the app:


Once your installation is complete, this is what you should see when clicking on the presented link: 


</description>
  </item>
  
  <item>
    <title>Apache Tomcat On Koding</title>
    <link>//learn.koding.com/guides/apache-tomcat-on-koding</link>
    <pubDate>"2014-07-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/apache-tomcat-on-koding</guid>
    <author>Vinay Jain</author>
    <description>In this guide we&amp;apos;ll take a look on how to deploy Java Web Applications on Apache Tomcat Server running on your Koding Virtual Machine.
Since you are here I assume that you already know what Web Applications are and why do you need Apache Tomcat to run those applications.
Tomcat doesn&amp;apos;t come preinstalled with your VMs, so you need do download, install and configure Tomcat manually. Follow the steps below to get started :-
Go to the Terminal, and download tomcat 7.0 using the wget command.
wget http://apache.mirrors.hoobly.com/tomcat/tomcat-7/v7.0.55/bin/apache-tomcat-7.0.55.tar.gz  
If the above link doesn&amp;apos;t work, make sure you get the link from the tomcat&amp;apos;s download page. 
Extract the downloaded file by typing :-
tar -xvzf apache-tomcat-7*
Rename the directory for easy access in future.
mv apache-tomcat-7.0.55 tomcat
Now we need to set role and password in tomcat-users.xml . Use the command below to edit the tomcat-user.xml.
nano apache/conf/tomcat-users.xml
Add these lines just above &amp;lt;/tomcat-users&amp;gt;
&amp;lt;user name=&amp;quot;anyusername&amp;quot; password=&amp;quot;anypassword&amp;quot; roles=&amp;quot;admin-gui,manager-gui&amp;quot; /&amp;gt;
Since we have apache server (for PHP) running on our VM on port 80, we must specify another running port for tomcat. So we will edit  server.xml file now. Use the command below to open it in nano.
nano apache/conf/server.xml
Find this line
&amp;lt;Connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot; ....&amp;gt;
Change the port number to 8084
Everything is setup now. Its time to run tomcat.
bash tomcat/bin/startup.sh
If you see Tomcat Started message, you can now open the localhost by typing in the address bar :-
`your_koding_domain:8084` , for me its `vinayjain.kd.io:8084`
Click on the manager app button and enter your username and password you set in tomcat-users.xml.
Congratulations, you have Apache Tomcat up and running on your Koding VM. Deploy the .war file of your Java app in tomcat and run it.
</description>
  </item>
  
  <item>
    <title>Finding your Koding VM Number</title>
    <link>//learn.koding.com/guides/find-your-vm-number</link>
    <pubDate>"2014-07-25T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/find-your-vm-number</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over finding your Koding Virtual Machine 
number, and what it&amp;apos;s needed for.
  VM Number, what&amp;apos;s that? Koding Virtual Machines have a unique string that allows you to connect to them 
from the your browser, SSH, or FTP. The VM Number of this string is a number 
that increments with each additional VM that you create. The string will always 
be formatted the same, but the number will change between your different VMs.
  Finding your VM Number The Terminal page has a list of your VMs. The VM Number, is the 
number on the left most side of the string. In the image below, the highlighted 
vm-9 is the VM Number.

  Using your VM Number There are two ways in which you may see your VM Number used. Lets go over each.
The first is simply your VMs URL. You may create other URLs and point them to 
your VM, but your VM URL will always be accessible.
http://vm-0.username.kd.io

The second is used to connect to your VM with FTP or SSH. This is a special URL 
which accepts FTP and SSH connections, proxying them to your VM.
vm-0.username.koding.kd.io

Note the koding in the address, as it is important.
</description>
  </item>
  
  <item>
    <title>3 Easy steps to set up WordPress on Koding</title>
    <link>//learn.koding.com/guides/wordpress-kdapp</link>
    <pubDate>"2014-07-24T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/wordpress-kdapp</guid>
    <author>Granger Lang</author>
    <description>What is WordPress? 
WordPress is a free and open source blogging tool and a content management system (CMS) based on PHP and MySQL, which runs on a web hosting service. Features include a plug-in architecture and a template system. WordPress is used by more than 22% of the top 10 million websites as of August 2013. WordPress is the most popular blogging system in use on the Web, at more than 60 million websites.
Getting started with your own WordPress environment on Koding is as simple as following these 3 steps!
Step 1: 
Run the WordPress Installer App on Koding. [Note: you have to be 
logged into your Koding account in order to run the app.]
This is what you will see when you launch the app from the Koding App Store:


Step 2: 
Once the setup is complete, a link to the page below will be presented. Click on the link and enter the information needed. Then click Install WordPress to complete your installation.


Congrats! WordPress is now installed!


After logging in, you will see your WordPress Dashboard, where you have full control over your WordPress environment:


Step 3: 
Let&amp;apos;s do some customization. Want to install a new theme? On the left menu bar, click Appearance, then Add New Theme. When prompted for connection information, enter this: 
Hostname: localhost
FTP Username: Your Koding Username
FTP Password: Your Koding Password


And here is a preview of the freshly installed Responsive theme: 


That&amp;apos;s it for the WordPress on Koding Guide! Have fun!
</description>
  </item>
  
  <item>
    <title>What is Bitbucket?</title>
    <link>//learn.koding.com/guides/using-bitbucket-on-koding</link>
    <pubDate>"2014-07-16T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/using-bitbucket-on-koding</guid>
    <author>Team Koding</author>
    <description>Bitbucket provides Git and Mercurial hosting for teams.
Host your code online in as many public and private repositories as you want. Free five-user tier accounts!
Manage your projects with confidence with built-in issue trackers, wikis, code comments, and pull requests.
  Setup SSH for Git If you already have ssh keys, then please skip this step.
Please follow this excellent guide by Atlassian on how to setup
ssh keys. 
  Selecting a Repository from Bitbucket Now that you have setup ssh, it is time select a repository from Bitbucket.
When signing into Bitbucket you will be presented with a list of repositories.
For this guide I am going to choose the codemirror repository

  Getting the SSH Clone Url In the repository dashboard you will see a panel in the upper right corner.
Set the url to ssh and copy the url.

  Clone the Repository Good Job so far! Now lets clone the repository into your ~ folder
$ git clone git@bitbucket.org:bvallelunga/codemirror.git
Once git is finished cloning, your terminal will look like this
$ git clone git@bitbucket.org:bvallelunga/codemirror.git
Cloning into &amp;apos;codemirror&amp;apos;...
Enter passphrase for key &amp;apos;/home/bvallelunga/.ssh/id_rsa&amp;apos;: 
remote: Counting objects: 13109, done.                                                                                                                                                                       
remote: Compressing objects: 100% (5060/5060), done.                                                                                                                                                         
remote: Total 13109 (delta 8025), reused 13109 (delta 8025)                                                                                                                                                  
Receiving objects: 100% (13109/13109), 2.78 MiB | 717 KiB/s, done.
Resolving deltas: 100% (8025/8025), done.
  Verify the Repository Exists The last step is to verify that the cloning proccess was successful.
To do this, get the directory listing and check to see if your intended folder exists.
$ ls
Applications  codemirror  Documents  Uploads  Web
As you can see, the codemirror folder exists. Thank you and have a wonderful Koding day!
</description>
  </item>
  
  <item>
    <title>Drupal Setup and Installation for Beginners</title>
    <link>//learn.koding.com/guides/php-cms/drupal/setup</link>
    <pubDate>"2014-07-15T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/php-cms/drupal/setup</guid>
    <author>Thien</author>
    <description>This article will cover the basic steps on how to setup a blog using Drupal. Also you can install Drupal via Koding App here.
  What&amp;apos;s Drupal? Drupal is a content management system (also refered to as CMS), meaning Drupal is used to manage content on informational sites, social media sites, member sites, intranets and web applications.
But how do you set up Drupal on Koding? Well it&amp;apos;s simple, you just follow the simple tutorial below step by step. After you&amp;apos;ve finished with the tutorial you&amp;apos;ll have a brand new website that runs Drupal.
  Step-by-step Drupal   Step 1. Open up your Koding Terminal and type in the following command to get started.
cd Web
  Step 2. Next up, you must download Drupal version that you&amp;apos;re planing on using, in this case we are going to use Drupal 8
wget http://ftp.drupal.org/files/projects/drupal-8.x-dev.tar.gz
  Step 3. Extracting Drupal, type the following command (replacing &amp;quot;x.x&amp;quot; with your downloaded version&amp;apos;s number):
tar zxvf drupal-8.x-dev.tar.gz  &amp;amp;&amp;amp; rm -rf drupal-8.x-dev.tar.gz
  Step 4. Moving Drupal to its intended location
  Step 5 In order to Drupal working on Nginx, open up the default virtual host(block) file.
sudo vi /etc/nginx/sites-available/default
The configuration should include the changes below (the details of the changes are under the config information):
    server {

        listen   80;
        server_name duythien.kd.io;

        index index.php index.html index.htm;
        set $root_path &amp;apos;/home/duythien/Web/drupal-8.x-dev&amp;apos;;
        root $root_path;

        gzip_static on;

        location = /favicon.ico {
                log_not_found off;
                access_log off;
        }

        location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
        }

        # Very rarely should these ever be accessed outside of your lan
        location ~* \.(txt|log)$ {
                allow 192.168.0.0/16;
                deny all;
        }
        location ~ \..*/.*\.php$ {
                return 403;
        }

        # No no for private
        location ~ ^/sites/.*/private/ {
                return 403;
        }

        # Block access to &amp;quot;hidden&amp;quot; files and directories whose names begin with a
        # period. This includes directories used by version control systems such
        # as Subversion or Git to store control files.
        location ~ (^|/)\. {
                return 403;
        }

        location / {
                # This is cool because no php is touched for static content
                try_files $uri @rewrite;
        }
        location @rewrite {
            # You have 2 options here
            # For D7 and above:
            # Clean URLs are handled in drupal_environment_initialize().
            rewrite ^ /index.php;
            # For Drupal 6 and bwlow:
            # Some modules enforce no slash (/) at the end of the URL
            # Else this rewrite block wouldn&amp;apos;t be needed (GlobalRedirect)
            #rewrite ^/(.*)$ /index.php?q=$1;
        }
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass unix:/var/run/php5-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include fastcgi_params;
        }
    }
Save and Exit. If you want to run Drupal on Apache, you need to edit the Apache configuration file configuration Apache
sudo vi /etc/apache2/sites-available/default
Then you&amp;apos;ll need to create the database for Drupal, by running the following code.
    echo &amp;apos;CREATE DATABASE drupal8&amp;apos; | mysql -u root
If you don&amp;apos;t known password Mysql, head over to this tutorial here. If everything goes fine, you should see the following screen in your browser:

If you see this error  Writable (public download method), you need to run following code in the command line.
 cd $ROOT/site        #/var/www/drupal-8.x-dev/sites
 sudo chmod a+w -R default
That&amp;apos;s it! You&amp;apos;re now running Drupal on Koding! Have fun!
This has been a beginner guide from Koding. As always, more Quick Tips and beginner friendly guides coming soon, so stay tuned!
</description>
  </item>
  
  <item>
    <title>How to setup an SSH Tunnel in Unix</title>
    <link>//learn.koding.com/guides/ssh-tunneling</link>
    <pubDate>2014-08-9</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/ssh-tunneling</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over what SSH Tunneling is, what it&amp;apos;s used for, 
and how to set one up on your Koding VM. So, lets get started!
  What is SSH Tunneling? SSH Tunneling is the process of sending and receiving TCP and UDP packets 
through an SSH Connection. This enables you to bypass proxies and go 
directly to your VM, with whatever data/etc that you need.
  Why would I want to SSH Tunnel? Koding Virtual Machines do not have direct IP access. They proxy http 
connections from your domain, to the machine itself. Note that only HTTP 
is proxied. This is why when you SSH into your VM, you set up a special 
SSH config to run your connection through ssh.koding.com.
Because of this Proxy, some things you may want to do on Koding, such as 
connecting a MySQL Database Client directly to your MySQL Server becomes 
impossible via the username domains.
To solve this, you use SSH Tunneling to connect to servers directly on 
your VM, from your local machine. Lets take a look at how this is done.
  Using a SSH Tunnel First up, make sure you have gone through the SSH Guide, and 
can successfully connect to your VM using the steps outlined in that 
guide. You must have a working SSH connection for this to work.
Next, run the following command.
ssh -L 8080:localhost:80 vm-0.username.koding.kd.io
Where vm-0 is the number of your VM, and username is your Koding 
username.
After running this command, you&amp;apos;ll simply connect to your VM.. it may 
appear like nothing has happened. But now, like magic, try loading the 
following URL into your browser.
http://localhost:8080/
Just like magic, you can see that your Port 8080 on localhost is 
returning the same thing as:
http://username.kd.io:80
Awesome! To connect with something like a MySQL Database Client, simply 
create an SSH tunnel with the appropriate Port on the Virtual 
Machine, and any port you&amp;apos;d like for your localhost. Then connect to 
your localhost with your MySQL Client!
</description>
  </item>
  
  <item>
    <title>Use Your Favorite Desktop Code Editor with Koding</title>
    <link>//learn.koding.com/guides/dropbox-for-file-sync</link>
    <pubDate>"2014-07-14T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/dropbox-for-file-sync</guid>
    <author>Team Koding</author>
    <description>We often get asked the question: &amp;quot;Can I use my fav editor on my local system along with my Koding VM?&amp;quot; The answer to that question has always been yes. You can use ftp or Google Drive and this guide will walk you through how to set up Dropbox right on your Koding VM for a seamless sync experience between your local system and your Koding VM. Dropbox has built a best-in-class file sync and storage service and so we&amp;apos;re excited to bring you the strength of their software as an add-on to your already robust and feature-rich Koding VM.
  Things you will need to get started 
A Dropbox account (free or paid)
The Dropbox client installed and up and running on your local system (please check this site to download the Dropbox client for your OS
A Koding account (free or paid)

  Steps to Install 
Log in to your Koding account
Go to the Koding App Store and select the Dropbox app. 
Click the Run button in the upper right corner
Enter your password! 
Click the Install button 
Click the Start button 
Authorize with Dropbox by clicking the link 
Your files should start syncing in a second, it may take a minute or two 

  What happens behind the scenes? The Koding Dropbox app installs and manages Dropbox straight from your vm. Note, and this is very important, the app will only synchronize the ~/Dropbox/Koding folder, so please put all your code in the Koding folder. If you don&amp;apos;t have a Koding folder, please make one on your local computer. Any file in the Koding folder in your Dropbox account will get syncronized immediately when it is saved. Since Dropbox handles the synchronization, you don&amp;apos;t have to deal with ftp or remember to send your changes up to your vm. And if there are any conflicts with your files, Dropbox will alert you and handle the problem gracefully. So all you have to do is fire up your favorite IDE and code away. Dropbox will sync the files to your Koding VM from where you can run your code on the VMs command line or access the application you are building over the VMs web server.
  Steps to Uninstall 
Make sure Dropbox service in not running by clicking the &amp;quot;Stop Dropbox&amp;quot; button
Click the uninstall button 

  Things to Note 
The Dropbox folder will be created in the /home/&amp;lt;user&amp;gt; directory of your VM
The app only controls Dropbox, closing/removing the Dropbox app will not close/remove the Dropbox service
Feel free to use git in the Dropbox folder, all changes in your repo will synced on the fly

</description>
  </item>
  
  <item>
    <title>Enable PHP mail() function</title>
    <link>//learn.koding.com/guides/enable-php-mail-function</link>
    <pubDate>"2014-07-12T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/enable-php-mail-function</guid>
    <author>Team Koding</author>
    <description>This short guide will cover how to enable the mail() function in PHP.
The first thing you need to do is to run the following command in your Koding Terminal:
sudo apt-get install sendmail
After the previous command finishes the install process, of the sendmail package, we need to configure it. You can do that by running the following command. This will configure the mail server.
sudo sendmailconfig
You need to choose Yes to every question or configure it as you see fit.
That&amp;apos;s it! You can now use the mail() function in your PHP app. 
</description>
  </item>
  
  <item>
    <title>What happened to 127.0.0.1?</title>
    <link>//learn.koding.com/guides/what-happened-to-127-0-0-1</link>
    <pubDate>"2014-07-10T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/what-happened-to-127-0-0-1</guid>
    <author>Team Koding</author>
    <description>Users who are new to Koding development are often confused about why they are 
not seeing their NodeJS, Python, Ruby or etc Apps on their Koding Domain. This 
guide will explain this common issue, and how to work around it.
  0.0.0.0, your new 127.0.0.1 In short, use 0.0.0.0 for your Web Server IP instead of 127.0.0.1 on 
Koding. Lets dig a little deeper though, and explain what this means, and why.
  Why should i use 0.0.0.0? When you run web server applications they need an IP and Port to listen on.
Many development applications will default the IP to 127.0.0.1, the 
machine&amp;apos;s localhost. This works fine on your Laptop, because you are 
accessing your web server locally. When you use a Koding VM, you typically 
access it from the Koding Domain, which means that you&amp;apos;re accessing your web 
application externally. Meaning that connecting to username.kd.io:3000 will 
not respond with a web server running on 127.0.0.1:3000.
To solve this issue, we turn to our friendly 0.0.0.0 IP. Unlike 127.0.0.1, 
this IP will accept connections from any source. Localhost, or external.
  An example To help illustrate the above explanation, lets run a little NodeJS server and 
use curl and our browser to request it from multiple locations. If you want 
to follow along, copy the following code into a file named hello.js.
require(&amp;apos;http&amp;apos;).createServer(function(req, res) {
  res.end(&amp;apos;Hello!\n&amp;apos;);
}).listen(3000, process.argv[2]);
console.log(&amp;apos;Sending greetings on &amp;apos;, process.argv[2] + &amp;apos;:3000&amp;apos;);

Now that we&amp;apos;ve creating our little Node server, lets open up our 
Terminal and run it with the following.
node hello.js 127.0.0.1
Next, lets visit out domain at the following address, making sure to replace 
username with your Koding username.
http://username.kd.io:3000
As you can see from the following two images, our web server is not responding 
on our domain but it is responding with curl localhost.


As we previous discussed, we need to bind our NodeJS server to the 0.0.0.0 
address. Lets run our web server again with the proper address.
node hello.js 0.0.0.0
And open it up in our browser just like before.

Success!
Remember that the way in which you choose the IP of your Web Server can differ 
greatly between web frameworks. In this above example, we wrote our own web 
server, which accepts a single argument (the bind ip).
Look at the documentation for your web framework of choice, as it will almost 
certainly be different than what was used in this example.
</description>
  </item>
  
  <item>
    <title>Elixir on Koding</title>
    <link>//learn.koding.com/guides/elixir-on-koding</link>
    <pubDate>"2014-07-09T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/elixir-on-koding</guid>
    <author>Antoine Proulx</author>
    <description>This tutorial will show you how to install Elixir on your Koding VM and then how to update it when a new version is available.
  What is Elixir? From Elixir website:

Elixir is a functional, meta-programming aware language built on top of the Erlang VM. It is a dynamic language that focuses on tooling to leverage Erlang&amp;apos;s abilities to build concurrent, distributed and fault-tolerant applications with hot code upgrades.

  Installation Because Elixir runs on the Erlang VM, you need to install Erlang first. At the time of this 
writing, Elixir is at version 0.14.2 and it needs at least Erlang 17.
  Erlang To install Erlang, you can use the Erlang Solutions repository.
The first thing to do is to add the repository. To do that, open the Terminal and then enter the following:
wget http://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
sudo dpkg -i erlang-solutions_1.0_all.deb

The wget command will download a package that will be used to add the Erlang Solutions repository and the other one installs it (you&amp;apos;ll need to enter your Koding password for the second command).
You can now install Erlang by typing this in the Terminal:
sudo apt-get update
sudo apt-get install erlang

(When prompted if you want to continue, type y and then Enter.)
This will refresh the list of available packages and then install Erlang.
  Elixir Now that you have Erlang, you can install Elixir. To do this, we&amp;apos;ll use a precompiled version and place it in ~/lang/elixir.
In the following commands, you need to replace [elixir-version] by the value of the latest version that you&amp;apos;ll find on the download page. For example, at the time of this writing, Elixir is at version 0.14.2, so you would replace [elixir-version] with 0.14.2.
mkdir -p ~/lang/elixir
wget -O elixir.zip https://github.com/elixir-lang/elixir/releases/download/v[elixir-version]/Precompiled.zip
unzip elixir.zip -d ~/lang/elixir

The last thing you need to do is to add the Elixir binaries to your PATH. Your terminal will now know where to find Elixir.
First, open up your .profile file using nano:
nano ~/.profile

Then, at the end of the file, add:
PATH=$PATH:~/lang/elixir/bin

To exit nano and save the file, type Ctrl+x, y and then Enter.
To apply the modification to the PATH immediately, type:
source ~/.profile

Elixir is now installed!
  Usage The easiest way to begin with Elixir is to use Interactive Elixir. In your terminal, type iex to start it. You can now enter Elixir expressions and see their results.
The last thing you need to do is to learn Elixir!
  Update When a new version of Erlang and/or Elixir is released, you will want to update your installation.
  Erlang Because Erlang has been installed with apt-get, the only thing you need to do is to run the following command in your Terminal:
sudo apt-get update
sudo apt-get upgrade

The first command will update the list of the available packages and the second one will download 
and install the packages that have been updated in the repositories.
  Elixir Updating Elixir is not very complicated. First, you need to remove the old installation by issuing the following command in your Terminal:
rm -r ~/lang/elixir

Then, you can download the latest version of Elixir and extract the content of the archive like this (do not forget to replace [elixir-version]!):
mkdir -p ~/lang/elixir
wget -O elixir.zip https://github.com/elixir-lang/elixir/releases/download/v[elixir-version]/Precompiled.zip
unzip elixir.zip -d ~/lang/elixir

Elixir is now updated!
</description>
  </item>
  
  <item>
    <title>Where is my Web Server Root?</title>
    <link>//learn.koding.com/guides/where-is-my-webserver-root</link>
    <pubDate>"2014-07-09T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/where-is-my-webserver-root</guid>
    <author>Team Koding</author>
    <description>Koding VMs come with Apache preconfigured and serve a sample site to get you 
started. The files for this site are found in what is typically called your 
Web Server Root. This is the directory that Apache is serving up files from, 
and it is located within your Home directory, under the Web directory. The 
full path being:
/home/username/Web
Replace username with your username.
You can modify the contents of this directory with the Koding 
Terminal, or the Ace Editor. In this example, we&amp;apos;ll use Ace 
to browse the files with the FileTree.
First, open up Ace. In the left hand side you&amp;apos;ll see a FileTree, with a 
directory called Web. Double click the Web folder to expand it. Your FileTree 
should look something like this:

Those files are a series of example pages, and they&amp;apos;re being served by Apache 
on your Koding Domain. You can view this site by visiting your Koding Domain, 
at:
http://username.kd.io
Where username is your Koding username. You should see something like this:

You&amp;apos;ll notice that the PHP, Python, Perl, and Ruby links are actually files 
being generated from that language. As an example, the python.py file is 
being served up by Apache, with the aid of Apache&amp;apos;s mod_python module. This 
serves to illustrate that this is a real Apache server, and you can use it 
just like you expect.
You should now understand where your Web Server Root is, and how to access it 
from the Web to develop and share your web applications. Happy Koding!
</description>
  </item>
  
  <item>
    <title>Sync files using Google Drive</title>
    <link>//learn.koding.com/guides/sync-files-google-drive</link>
    <pubDate>"2014-07-08T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/sync-files-google-drive</guid>
    <author>Team Koding</author>
    <description>This guide will cover how to get started with syncronizing your files that are hosted on your Google Drive account (works
with both personal and business Google Apps accounts).
You can install Google Drive on your Koding VM by following these simple steps in Terminal.
  Steps To achieve the sync, we will use an app called grive so first you need to install the grive app using the following command:
sudo apt-get install grive
After that you need to create a folder where the Google Drive folders and files will be synced
mkdir GDrive
cd GDrive
We need to softlink some dependencies for the grive app to work properly. Use the following command to achieve this.
sudo ln -s /usr/lib/libbfd-2.23.2-system.so /usr/lib/libbfd-2.23-system.so
The last step is to start the Google Drive app and authorize it with the Google services.
grive -a
Cut and paste the link that the grive app shows you into a new browser tab/window to get an authorization code. 
Once you have an auth code, paste it back in the Terminal window to continue the installation process.
Now you can sync you files using the command grive in the GDrive folder you created.
Note 1: The app does not run in the background automatically continuously doing a sync. In order to achieve that, you can
set up a cron job on your VM that runs every x seconds/minutes/hours depending on your preference. To learn
more about cron, open up a new Terminal tab and type in:
man cron
 Note 2: As per the author of grive, the application will not download any files that are the traditional Google Docs (Spreadsheet, Documents,
Presentations, etc.). The app will automatically download/upload any non-native Google Doc format and this inculdes
code files, text files, images, etc.
</description>
  </item>
  
  <item>
    <title>Setting phpMyAdmin password</title>
    <link>//learn.koding.com/guides/setting-phpmyadmin-password</link>
    <pubDate>"2014-06-30T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-phpmyadmin-password</guid>
    <author>Joenel de Asis</author>
    <description>This guide will help the first time users about setting the root password of phpMyAdmin on your Koding Virtual Machine.
  What is phpMyAdmin phpMyAdmin is a free and open source tool written in PHP 
intended to handle the administration of MySQL with the use of a web browser. 
It can perform various tasks such as creating, modifying or deleting databases, 
tables, fields or rows; executing SQL statements; or managing users and 
permissions.
  Instructions By default phpMyAdmin is already installed in your Koding VM.
First we need to set a password to our root user in mysql. Open your Koding 
Terminal and type the following then hit enter.
sudo mysqladmin -u root password
You might be prompted for your sudo password. Use your Koding account password 
and hit enter. Next you&amp;apos;ll be prompted for your MySQL Password, twice. This 
will set your mysql root password with your desired password and will be used 
to login in phpmyadmin.
You can now login using root with the password you&amp;apos;ve set a while ago, you can access phpMyAdmin by visiting
http://USERNAME.kd.io/phpmyadmin/
Remember change the USERNAME with you Koding account username. That&amp;apos;s all 
folks!
</description>
  </item>
  
  <item>
    <title>Installing Phalcon on Koding</title>
    <link>//learn.koding.com/guides/installing-phalcon</link>
    <pubDate>"2014-06-27T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-phalcon</guid>
    <author>Jay</author>
    <description>This article will cover the process of installing and setting up Phalcon in your Koding environment.
  What is Phalcon Phalcon is an open source framework for PHP 5. It differs from other frameworks like Codeigniter, Laravel, etc. in that it is implemented as a C extension. This minimizes memory usage and offers significant performance advantages in comparison to other frameworks.
  Step 1 - Install the Prerequisites Before we can install Phalcon, we need to install the following dependencies:

PHP 5.x development resources
GCC compiler

Open your Koding Terminal and type the following:
sudo apt-get install php5-dev php5-mysql gcc libpcre3-dev
After typing this and hitting enter, you might be prompted for a password. Type in the password of your Koding account and hit enter.
This command might take a few minutes to execute and will fetch and install all the required prerequisites.
  Step 2 - Fetch the Source Code In your Koding Terminal and type the following:
git clone --depth=1 git://github.com/phalcon/cphalcon.git
Executing this command will create a directory named cphalcon and save the latest stable source code in it. We will use this source code to install Phalcon in the next step.
  Step 3 - Install Phalcon Once you have fetched the source code in step 2, type the following two commands in your Koding Terminal:
cd cphalcon/build
sudo ./install
Executing these commands will install the Phalcon extension for PHP in your Koding environment.
  Step 4 - Modify php.ini We now have to modify the php.ini file to include the newly installed Phalcon extension. We can do this by creating a new configuration file for this extension (located at /etc/php5/apache2/conf.d/30-phalcon.ini) and adding the following line to it:
extension=phalcon.so
If you are familiar with vim or nano, you can use either to do this. Alternatively, you can type the following command to append the above line in php.ini:
sudo sh -c &amp;quot;echo &amp;apos;extension=phalcon.so&amp;apos; &amp;gt; /etc/php5/apache2/conf.d/30-phalcon.ini&amp;quot;
This will create the new configuration file and add the required line.
  Step 5 - Restart Apache After completing all the above steps, all that is left to do is restart Apache so that it can load the Phalcon module for PHP. Type in the following command in your Koding Terminal:
sudo service apache2 restart
  Step 6 - Verify the Installation Create a new php file in your public web directory /home/USERNAME/Web (replace USERNAME with your Koding username). You can name it anything but for this example, we&amp;apos;ll name it phpinfo.php. Put the following content in this file:
&amp;lt;?php
phpinfo();
Once this is done, you can open this file in your browser by visiting
http://USERNAME.kd.io/phpinfo.php 
(replace USERNAME with your Koding username) 
This page should show you the PHP configuration on your machine. 
One of the section contains information about Phalcon (search on the page for phalcon by pressing Ctrl + F). 
If you can see this section, it means that Phalcon has been installed on your machine and you can start using it right away!
</description>
  </item>
  
  <item>
    <title>Updating Node.js on your VM</title>
    <link>//learn.koding.com/guides/updating-nodejs-on-your-vm</link>
    <pubDate>"2014-06-27T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/updating-nodejs-on-your-vm</guid>
    <author>Darryl Dias</author>
    <description>Your Koding VM is powered by Ubuntu 13.10, by default your Koding VM comes pre-installed with the Node 0.10.18 that is the current stable version of Node.js. available in the official Ubuntu repository. We can update to the latest stable version of Node.js available for Ubuntu 13.10 by adding the official Node.js PPA to our local sources list and running a dist-upgrade to switch to the latest stable version.
The Official PPA is updated regularly and is maintained by Chris Lea
  Instructions Adding the official Node.js PPA
sudo add-apt-repository ppa:chris-lea/node.js

Updating the local package database and sources list.
sudo apt-get update

Updating to the latest stable build of Node.js available for Ubuntu 13.10. This will update all the packages that need to update and will also update your Node.js package.
sudo apt-get dist-upgrade

If you had deleted Node.js from your VM, you can install it by entering the command below. The PPA installs NPM as a part of nodejs and does not require you to install NPM seperately.
sudo apt-get install nodejs

Check the version of Node.js after installing. 
node --version

The example output should look like.
v0.10.25

Now we have the latest stable version of Node.js installed on your VM.
</description>
  </item>
  
  <item>
    <title>Setting up a framework webserver</title>
    <link>//learn.koding.com/guides/setting-framework-webserver</link>
    <pubDate>"2014-06-25T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-framework-webserver</guid>
    <author>Levent Yalcin</author>
    <description>Koding is the easiest way to say goodbye to your localhost. 
Using your personal machine for projects means you have to bind your daemons to public IP address, which can be a bit frustrating for a beginner. Developers usually tend to use certain frameworks that have built-in web servers. These web servers give you the ability to develop your projects and then test them. But there is a downside to that approach. Those web servers are not designated for production usage and besides that they only run locally which makes your daemon/project not accessible to the rest of the world. This means you can&amp;apos;t reach them from your Koding public domain. If you want to achieve this and make you daemons available for public access you have to bind your daemons to 0.0.0.0 which listens to all IPv4 addresses. 
Here are a couple of examples on how to make your project available publicly by using Koding as your development playground.
  Django First we install Django and then create a project.
sudo pip install django
After Django has finished installing we start a new project like so:
django-admin.py startproject goodbyelocalhost
After that we run our built-in web server without binding it to localhost
cd goodbyelocalhost/
python manage.py runserver 0.0.0.0:8000
Voil&amp;#xE0;! You should see a working Django server.
  Laravel 4 and Artisan Installing Laravel 4
sudo curl -o /usr/local/bin/laravel &amp;apos;http://laravel.com/laravel.phar&amp;apos;
Set execute permission on the Laravel executeable.
sudo chmod +x /usr/local/bin/laravel
We create a new new Laravel project.
laravel new goodbyelocalhost
Navigate into the directory:
cd goodbyelocalhost
And then we start the webserver:
php artisan serve --host=0.0.0.0 --port=8080
Voil&amp;#xE0;! A working Laravel and Artisan webserver.
  MeteorJS Install MeteorJS
curl https://install.meteor.com/ | sh
Creating a Meteor project is as simple as 1, 2, 3
meteor create goodbyelocalhost
Running the project 
meteor
Meteor should listen to 0.0.0.0:3000 by default. If you can&amp;apos;t reach your project via the browser you have to make sure it listens to 0.0.0.0:3000. You can check this using the netstat command in another terminal window. 
sudo netstat -tnlp
  Rails Rails listens to 0.0.0.0:3000 by default. 
Install Rails via the following command
sudo gem install rails
Create a new project
rails new goodbyetolocalhost
cd goodbyetolocalhost
Start the webserver
rails server
Voil&amp;#xE0;! You have a Rails working webserver
  Tornado Create a new Python script using your favorite editor.
vim goodbyetolocalhost.py
Create a Hello, World! like so, to test if the webserver is running correctly.
import tornado.ioloop
import tornado.web

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write(&amp;quot;Hello, world&amp;quot;)

application = tornado.web.Application([
    (r&amp;quot;/&amp;quot;, MainHandler),
])

if __name__ == &amp;quot;__main__&amp;quot;:
    application.listen(8888, &amp;apos;0.0.0.0&amp;apos;) 
    tornado.ioloop.IOLoop.instance().start()

Then just run the script
python goodbyetolocalhost.py
  Symphony2 Installing Symphony2
First we need to install composer. Run the following commands to download, move and give right permissions to composer.
curl -sS https://getcomposer.org/installer | php #!/usr/bin/env php
sudo mv composer.phar /usr/local/bin/composer
chmod +x /usr/local/bin/composer
Create a new project to test you webserver.
composer create-project symfony/framework-standard-edition goodbyetolocalhost 
cd goodbyetolocalhost
Start the server like so.
php app/console server:run 0.0.0.0:8080
Enjoy a fully working Symphony2 webserver!
</description>
  </item>
  
  <item>
    <title>Webmin for Koding</title>
    <link>//learn.koding.com/guides/webmin-for-koding</link>
    <pubDate>"2014-06-24T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/webmin-for-koding</guid>
    <author>Mike Spick</author>
    <description>  The Details This guide will cover the installation of Webmin on your Koding Virtual Machine. Webmin is a web-based adminstration tool for Unix based operating systems. 
This tool will allow you to modify and control applications like Apache, and view/modify your MySQL DBs. Webmin also allows you to modify other system tools 
from the web like users, passwords, iptables, log file rotations and more! If you&amp;apos;d like to read more about Webmin, you can check out their website here.
  Downloading and installing Webmin Alright, first thing&amp;apos;s first, we want to add the webmin team&amp;apos;s repo to our apt sources. Run the following command to open apt&amp;apos;s source list for editing.
sudo vi /etc/apt/sources.list
Press i to enter the vi input mode to edit the list. Add the following to the bottom of the file.
deb http://download.webmin.com/download/repository sarge contrib
It should look like below when you are done.

After adding this line press ESC to exit input mode. Then type :wq to write(save) and quit the file.
Now that apt has the source, lets run the following command to download and install the key needed for webmin.
wget -q http://www.webmin.com/jcameron-key.asc -O- | sudo apt-key add -
We can now update apt, and install Webmin. You can use the following commands.
sudo apt-get update

sudo apt-get install webmin
You will be prompted if you want to continue, press Y to accept.
Once the install is complete, you will see the following as the final output:

Make note of the url given here as you will need it to access Webmin once it is setup.
  Configuration Congratulations! Webmin is now installed on your Koding VM. We only have a few things left to do before it is useable. We need to change the SSL setting in the miniserv config file from 1 to 0. Enter the following command to open the config file for editing.
sudo vim /etc/webmin/miniserv.conf
Once the file is open press i to enter input mode. Use the arrow keys to navigate to the line SSL=1 change this line to read SSL=0. Again, hit ESC and type :wq to write(save) and quit the file.
The file should look like below before editing. 

In order to apply the changes we have made to the configuration, we will need to restart the webmin service. To do that enter the following command.
sudo service webmin restart
You&amp;apos;ve done it! Webmin is installend and configured!
  Logging In First you need reset your root password. You can do that with the following command.

   sudo passwd root


Navigate to the URL you took note of earlier.
To login to webmin, you can use the root user + your Koding password.
</description>
  </item>
  
  <item>
    <title>Getting started with Git</title>
    <link>//learn.koding.com/guides/git</link>
    <pubDate>"2014-06-14T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/git</guid>
    <author>Team Koding</author>
    <description>Git has become an integral part of the modern software development cycle. As per Wikipedia, Git
&amp;quot;is a distributed revision control and source code management (SCM) system with an emphasis on speed. Git was initially designed and developed by Linus Torvalds for Linux kernel development in 2005.&amp;quot;
Several tutorials exist on the Internet that teach you the basics of Git. A simple Google search will reveal many of them. Here&amp;apos;s our favorite from the good folks over at Atlassian.
</description>
  </item>
  
  <item>
    <title>Author A Guide: Advanced</title>
    <link>//learn.koding.com/contribute/advanced</link>
    <pubDate>"2014-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/contribute/advanced</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over contributing by using Git directly in your 
Terminal, and editing our documents on Koding. While we will go over 
every step, general Git and Terminal knowledge will be very helpful, and 
are recommended. So, lets get started!
  Forking and Cloning First up, we should cover the requirements.

A Koding Account
A Github Account
Git (Comes with your Koding VM)
SSH Key on Github. If you&amp;apos;re not familiar with this, refer to this 
tutorial

Next, we need to &amp;quot;Fork&amp;quot; the KDLearn Repo. This will create your 
own version of the repo on Github, and lets you push your changes to this 
repo.
To do this, press the Fork button seen in the following image, from the 
KDLearn repo page:

This will create a new Github repository with the name 
github.com/yourUsername/kdlearn. The purpose of this forked repository 
will become clear once we make our Pull Request.
Next, we will want to clone our newly forked repository. Head on over to 
your Koding Terminal and type in the following command:
git clone https://github.com/yourUsername/kdlearn.git
This will clone your Forked Repository to your Koding VM, into the folder 
kdlearn.
  Writing a new Guide Now that we have our repo cloned, lets add our guide. Open up the Ace 
editor and open a folder titled kdlearn. In this section we&amp;apos;re 
going to write a guide, but if you just want to edit another guide, 
scroll down to the edit section.
Lets create a file in the guides folder with the name myguide.md.Name the file whatever you like, just try to keep it short and url 
friendly.

This is where we will write all of our content, in Markdown. For this 
tutorial i am just going to use the following text:
# Awesome Guide

This is my **awesome** guide! Follow along, and learn to be awesome!

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse dui 
nulla, posuere non urna in, lobortis malesuada erat. Morbi ultricies 
fringilla condimentum. Aliquam vel sodales mi, ornare ullamcorper est.  
Nulla laoreet dapibus libero, in consectetur dolor fermentum vel. Etiam 
quis magna eget orci fringilla tincidunt et non justo. Phasellus porta 
dictum libero. Suspendisse fringilla gravida arcu, eu venenatis nunc 
fermentum sed. Phasellus est libero, auctor ac dignissim ac, consequat a 
libero. Pellentesque iaculis sem tortor.  Suspendisse viverra, arcu ac 
viverra dapibus, massa odio adipiscing neque, eget adipiscing magna quam 
id dui. Morbi semper nisi ac accumsan tincidunt.

Now that we have written our guide, we need to add some metadata to it.
  Metadata Metadata is, as the name says, data about our data. This is where you can 
specify the title of your document, the author, the date, and categories.Lets take a look at our above markdown with some of this metadata.
---
author: Lee Olayvar
username: leeolayvar
date: 2014-06-11
description: &amp;apos;My awesome guide, about awesome stuff.&amp;apos;
categories: [awesome]
---

# Awesome Guide

This is my **awesome** guide! Follow along, and learn to be awesome!

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse dui nulla, 
posuere non urna in, lobortis malesuada erat. Morbi ultricies fringilla 
condimentum. Aliquam vel sodales mi, ornare ullamcorper est. Nulla laoreet 
dapibus libero, in consectetur dolor fermentum vel. Etiam quis magna eget orci 
fringilla tincidunt et non justo. Phasellus porta dictum libero. Suspendisse 
fringilla gravida arcu, eu venenatis nunc fermentum sed. Phasellus est libero, 
auctor ac dignissim ac, consequat a libero. Pellentesque iaculis sem tortor.  
Suspendisse viverra, arcu ac viverra dapibus, massa odio adipiscing neque, eget 
adipiscing magna quam id dui. Morbi semper nisi ac accumsan tincidunt.

Most of that is pretty logical. The --- before and after signifies the 
metadata start and end, and author, date, description, and categories 
should be standard nomenclature to you.
  Editing a Guide If you&amp;apos;re just looking to update a guide, fix typos, or make general 
improvements you have it even easier.
Just like before, open up Ace and find the file you want to edit.If you&amp;apos;re not sure where the proper markdown is located, find the url of 
the page you want to edit and think of them like folders. Then, review 
the File Structre section and you should have a pretty 
good idea where the files are located.
Make your edits, and follow onto the next section!
  Adding, Committing, Pushing Now that we have made our changes, whether it&amp;apos;s a new guide or an edited 
guide, we need to add the file, commit it, and push it to our repo. Open 
up the Terminal one last time.
To add your changes, run the following command. Replacing myguide with 
the files you changed.
git add guides/myguide.md
To commit your changes, run the following command. Replacing I added an 
awesome guide with a message that clearly describes your changes.
git commit -m &amp;quot;I added an awesome guide&amp;quot;
You can also ommit the whole -m &amp;quot;message&amp;quot; flag and use an editor such 
as Nano or Vim to make your changes. But the above is simpler for this 
guide.
And finally, lets push our changes to our repo on Github.
git push origin master
If you&amp;apos;re not familiar with Git at all, run each of these commands in 
sequence.  We won&amp;apos;t be covering Git in full, so for more information 
please see the official documentation.
  Making a Pull Request Now that you pushed to Github you can visit your forked Github repository 
and make a pull request. To do this, look for the &amp;quot;Pull Request&amp;quot; button 
on your forked repo:

This will take you to a page where you can review all of the commits you 
made, and ensure that you want to make a pull request. Please review your 
changes for typos, spelling, and grammar.
If you spot an issue, and need to make more changes, go back to 
Koding and make the edits you need. Make sure to add, commit, and 
push them just like before.
If you&amp;apos;re happy with your changes, press the big green Create Pull 
Request button.
  Waiting for your PR to be Accepted Once your PR is made, you&amp;apos;re done! The Koding Team will review your edits 
or new guides and make feedback.
If we need you to make corrections, formatting or otherwise, go through 
the same steps as before. Your changes, once pushed to Github, will 
automatically be reflected in your Pull Request.
Once they are accepted, and your pull request is merged, the site will be 
updated and you&amp;apos;re changes will be live. Thanks for your contribution!
In the next guide we&amp;apos;ll go over previewing your work in a local 
installation of Koding University.
</description>
  </item>
  
  <item>
    <title>Markdown Basics, for Koding</title>
    <link>//learn.koding.com/guides/markdown</link>
    <pubDate>"2014-05-30T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/markdown</guid>
    <author>Team Koding</author>
    <description>Markdown is a simple language whose syntax can be easily converted into HTML.Koding, like many other sites, use Markdown as a way for users to easily style 
their text. In this guide, we&amp;apos;ll go over the basics of Markdown and it&amp;apos;s usage.
  Official Documentation The official Markdown 
documentation covers the 
Markdown syntax quite well, and as such this guide will only briefly touch on 
each major syntax structure. If any questions remain, please refer to the 
official documentation.
  Emphasis Emphasis can be achieved by wrapping the word you&amp;apos;d like to emphasise with a 
single asterisk or underline. Example:
Hello, *this is emphasised* and this isn&amp;apos;t!

  Strengthen To strengthen your text wrap it with double asterisks or underlines. Example:
Hello, **this is strong** and this isn&amp;apos;t!

  Inline Code Typing code within a sentence is considered inline code. Inline code is 
accomplished by wrapping the code with backticks ``` For example:
Foo `bar` baz

  Code Blocks Codeblocks can be achieved by wrapping your code in triple backticks, but make 
sure to include a newline after each tripple backtick. Example:
Take a look at my awesome code:

```coffee
do -&amp;gt; console.log &amp;apos;Weee&amp;apos; while true
```

Nifty eh?
Note the coffee text right behind the first triple backtick. This signifies 
the language of the code used in that code block, and Koding will add syntax 
highlighting if you specify the language.
  Headers # This is a Header 1

## This is a Header 2

The # foo syntax represents headers of varying levels. The number of hashes 
represents the level of header, with a maximum of 6.
  Links [Koding](https://koding.com)
[Koding Terminal, from Koding](/Terminal)

The [foo](bar) syntax will create a link. Links can be absolute or relative, 
just like html links.
  Unordered Lists Unordered lists can be by prepending your items with a hyphen. Example:
- Item one
- Item two
- Item three

Markdown will also embed lists and list content, if you add indentation.Example:
- Item one
- Item two
  This is still within item two.
  - This is a list item in item two.
  - And another
- Item three

  Ordered Lists Ordered lists are identical to unordered lists in features, you just have to 
prepend your list items with a number, instead of a hyphen. Example:
1. Item one
2. Item two
3. Item three

</description>
  </item>
  
  <item>
    <title>Getting Started: The Activity Feed</title>
    <link>//learn.koding.com/guides/getting-started/activity-feed</link>
    <pubDate>"2014-05-30T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started/activity-feed</guid>
    <author>Team Koding</author>
    <description>The Activity Feed is the central location for discussion on Koding. A public or 
private message board, with markdown support, previewing, hashtag topics and 
more, it&amp;apos;s a central component to Koding&amp;apos;s Social experience.

  Posting and Formatting To post to the activity feed, find the input box in the top of the page.

Simply type something in, and press the green submit button. Just plain text 
can get a bit boring though, so Koding supports full 
Markdown, as seen below:

  Previewing To preview your post, simply press the little eye on the right side of the 
input box. Your Markdown will be rendered and highlighted appropriately, as 
seen below:

  Tagging Tagging your content is important. It allows us to categorize our content, 
which makes it easier to search and more likely to be seen by people who follow 
those topics.
When you type a hash character # followed by characters, a list of similar 
topics will popup. Keep typing and it will refine the list. At any time you can 
choose an existing topic, or keep your own.

In the above image i have half typed the tag #markdown. You can see the 
Markdown tag, as well as a handful of other tags.
  Searching Searching the activity feed gets its own dedicated spot in the upper right of 
the Koding UI.

Searching the activity feed will search for the contents of a post, as well as 
topics.
  Topics Topics can also be browsed from the Topics page.The topics page contains a searchable and browsable list of all of the Koding 
topics ever created.

As seen in the above image, the topics page has the advantage of being able to 
Follow a topic. Following is Koding&amp;apos;s way of subscribing you to that Topic. And 
to browse it, check out the Followed section of the Activity Page.
  Followed As mentioned above, the Followed section shows all of the content that you&amp;apos;re 
subscribed to. These can be from people you are following, or from topics that 
you are following.

This is a great way to see only the content you are interested in.
</description>
  </item>
  
  <item>
    <title>Getting Started: The UI</title>
    <link>//learn.koding.com/guides/getting-started/the-ui</link>
    <pubDate>"2014-05-30T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started/the-ui</guid>
    <author>Team Koding</author>
    <description>Before we dive into specific features or applications of Koding, lets break 
down the UI at the most basic level. Understanding the UI will help you make 
sense of what different sections of the site are, which is important when 
running user applications that may not always look the same as Koding.
So, lets get started!
  The Full Thing 
There it is in all it&amp;apos;s glory. What we have here is an few applications open in 
the app dock, the Ace editor app is in focus, and we have a notification that 
we should probably look at.
But what does all this mean? Well, lets take a look at each area one by one.
  The Application Two main features of Koding are its Applications and VMs. We won&amp;apos;t go into the 
full scope of each of these just yet, but just know that Applications are 
important.  So important, that they take up almost all of it&amp;apos;s UI!

What you see in the above image is considered a Koding Application. In this 
case, it&amp;apos;s the Ace Editor. This area of the UI is reserved for all sorts of 
applications. Your Terminal, DevTools, Teamwork, and even Koding specific 
things such as Environments, the Activity Feed, and user Profiles are all Apps.As an example, here are two more apps:
DevTools

and Environments

Don&amp;apos;t worry if you haven&amp;apos;t seen these apps before, we&amp;apos;ll get into them in the 
future. The key to remember here is that this area of the UI is reserved for 
Applications.
But how do we change applications you ask?
  The App Dock We change applications with the App Dock!

Applications that you install will be located in your App Dock. You&amp;apos;ll notice 
that the URL of Koding changes with each app too. Each application has it&amp;apos;s own 
URL, which you can visit directly.  As an example, Checkout the 
Terminal!
When you click on an application, you load it into your session. A loaded 
application, even if not in focus, is indicated by a green bar above it&amp;apos;s icon 
within the App Doc. In the above image you can see that I have multiple 
applications open.
The App Dock is pretty wide, but it doesn&amp;apos;t quite take up the whole top bar.Lets take a look at the other side!
  Notifications, Profile, and Search 
The right side of the top bar has some important features. The primary one 
being Notifications.
Notifications are Replies to your Activity Posts, or replies to a post that you 
are communicating in. The circle button next to your profile is a Notification 
drop down. Click it, and your recent notifications will open. The Red 1 seen 
in the above image represents 1 unread notification.
The Arrow next to your profile is a general Koding menu, with links to your 
Account Settings, your 
Environments, and various other links.
Finally, the little magnifier is a search tool which can be used to search the 
Activity feed. The search tool always searches the activity feed because that 
is your central location for communicating with your development team, or the 
Koding Community in general.
This brings us right into the next page of this series, the Activity Feed!
</description>
  </item>
  
  <item>
    <title>Using Tmux on Koding</title>
    <link>//learn.koding.com/guides/using-tmux-on-koding</link>
    <pubDate>"2014-05-13T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/using-tmux-on-koding</guid>
    <author>Team Koding</author>
    <description>In this Tmux FAQ we will address an issue people have had with Tmux on Koding. It&amp;apos;s easy to deal with, but not an obvious workaround.
  Odd Behavior When you first try and install and run tmux on Koding, it seems to load properly, but many commands just don&amp;apos;t seem to work. Some, like C-b c (used to create a new window) even force close the Terminal. What is going on?
Well, Koding uses GNU Screen to help reconnect your Terminal sessions after connection issues. Koding&amp;apos;s preconfigured Screen is set to use C-b as it&amp;apos;s own prefix key. So when you run and use Tmux, and attempt to use C-b commands, you are actually sending commands to Screen. This explains the general odd behavior, as things like C-b c in Screen mean &amp;quot;close&amp;quot;, so you unintentionally logout of screen and close your Terminal.
  The Solution The solution is quite simple, rebind your Tmux Prefix key. This can be done by creating a ~/.tmux.conf file and placing the following command into it:
set-option -g prefix C-a
Where C-a is Control key. This sets it to Control-a, a popular alternative for Tmux users (and the traditional Screen PREFIX). You can of course bind it to whatever you want. Once you have your PREFIX rebound, killall tmux instances and reopen, and it will run just like you expect.. just remember to use Control-a as your PREFIX :)
  But i love C-b! Unfortunately, this is the way it has to be for now. A guru developer over at Koding did mention that they would like to make their version of screen not use any keybinds, so that it does not block your input at all. So, think of this alternate bind as a short-term workaround, until this &amp;quot;issue&amp;quot; is resolved.
</description>
  </item>
  
  <item>
    <title>Creating KDApps: Real World KDApp</title>
    <link>//learn.koding.com/guides/creating-kdapps/real-world-example</link>
    <pubDate>"2014-04-24T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/creating-kdapps/real-world-example</guid>
    <author>Team Koding</author>
    <description>We previously talked about what Koding Apps are, now lets create a
basic application which can be deployed, and shared with other Koders.
  Create it on DevTools Rather than copy code from this tutorial and paste it into DevTools, we&amp;apos;re 
going to simply have it create one for us.
So, open up DevTools and press the Create New button in the 
center of the app.

If you already have a file open, you&amp;apos;ll have to go to the DevTools menu in the 
upper right and choose Create a new App.
Choose whatever name for your app you like, and press Create. In this tutorial, 
the app is named &amp;quot;Example&amp;quot;.
  Examine our new App If we look into our newly created ~/Applications/Example.kdapp folder, we can 
see that DevTools created a handful of files. Two of which are quite familiar, 
index.coffee and manifest.json.
We&amp;apos;re going to ignore the Manifest file for the moment, but we&amp;apos;ll cover that 
soon. Lets take a look at our friendly index.coffee file.
class ExampleMainView extends KDView

  constructor:(options = {}, data)-&amp;gt;
    options.cssClass = &amp;apos;example main-view&amp;apos;
    super options, data

  viewAppended:-&amp;gt;
    @addSubView new KDView
      partial  : &amp;quot;Welcome to Example app!&amp;quot;
      cssClass : &amp;quot;welcome-view&amp;quot;

class ExampleController extends AppController

  constructor:(options = {}, data)-&amp;gt;
    options.view    = new ExampleMainView
    options.appInfo =
      name : &amp;quot;Example&amp;quot;
      type : &amp;quot;application&amp;quot;

    super options, data

do -&amp;gt;

  # In live mode you can add your App view to window&amp;apos;s appView
  if appView?

    view = new ExampleMainView
    appView.addSubView view

  else

    KD.registerAppClass ExampleController,
      name     : &amp;quot;Example&amp;quot;
      routes   :
        &amp;quot;/:name?/Example&amp;quot; : null
        &amp;quot;/:name?/yourusername/Apps/Example&amp;quot; : null
      dockPath : &amp;quot;/yourusername/Apps/Example&amp;quot;
      behavior : &amp;quot;application&amp;quot;

Lets break this code down, piece by piece.
  ExampleMainView First up, our friendly neighborhood ExampleMainView.
class ExampleMainView extends KDView

  constructor:(options = {}, data)-&amp;gt;
    options.cssClass = &amp;apos;example main-view&amp;apos;
    super options, data

  viewAppended:-&amp;gt;
    @addSubView new KDView
      partial  : &amp;quot;Welcome to Example app!&amp;quot;
      cssClass : &amp;quot;welcome-view&amp;quot;

ExampleMainView is a Koding View. Views are Kodings way of programmatically 
representing the DOM. Allowing you to define elements and modify them all from 
your code. In the above code, our view will be literally compiled to the 
following html
&amp;lt;div class=&amp;quot;kdview example main-view&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;kdview welcome-view&amp;quot;&amp;gt;Welcome to Example app!&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

You can modify these views by adding css, changing their content, adding 
subviews, or even removing them entirely at a later time.
When our View is added to another view, such as appView, our viewAppended() 
method is called. This event is a good place to add our views with the 
KDView.prototype.addSubView method.
The KDView itself will be rendered to a generic div element, with the partial 
(contents) of &amp;quot;Welcome to Example app!&amp;quot;, and a cssClass of welcome-view.
  ExampleController class ExampleController extends AppController

  constructor:(options = {}, data)-&amp;gt;
    options.view    = new ExampleMainView
    options.appInfo =
      name : &amp;quot;Example&amp;quot;
      type : &amp;quot;application&amp;quot;

    super options, data

AppController is a recent addition to the KDFramework. It is used to register 
your App with Koding itself; Provided along with routes, names, and filepath 
information about your app.
  appView and KD.registerAppClass if appView?

  view = new ExampleMainView
  appView.addSubView view

else

  KD.registerAppClass ExampleController,
    name     : &amp;quot;Example&amp;quot;
    routes   :
      &amp;quot;/:name?/Example&amp;quot; : null
      &amp;quot;/:name?/yourusername/Apps/Example&amp;quot; : null
    dockPath : &amp;quot;/yourusername/Apps/Example&amp;quot;
    behavior : &amp;quot;application&amp;quot;

Here is where we actually use our ExampleController. We do so only if 
appView does not exist. If appView exists, we are already registered or the 
instance has already been created and loaded.
If it does not exist, we need to pass our ExampleController into the 
kd.registerAppClass function. 
The two main options given in this example are as follows:

name: The displayed name for this application.
routes: The routes that this application can be loaded from. In our 
example, https://koding.com/yourusername/Example and 
https://koding.com/yourusername/Apps/Example.

Note that most applications won&amp;apos;t need to modify routes their AppControllers.However, if more details are desired you can check out the source and 
soon the API Documentation will be posted.
  Compiling with DevTools Compiling can be done in a number of ways, but we&amp;apos;re going to focus on the 
easiest: Koding&amp;apos;s DevTools. All we have to do with DevTools open it 
up, and then from the FileTree on the left hand side locate our index.coffee
file and open it up.
In this example though, we&amp;apos;re already working in DevTools, so our app is 
already compiling instantly! It should look similar to the following image:

  Extending Functionality Now that you have your app loaded, lets make some changes. Lets add a button to 
our application! Exciting right?
Since we&amp;apos;ll likely want to have this button call a function in our code, we&amp;apos;re 
going to create it using KDViews. Specifically, the KDButtonView. Take the 
following code, and insert it in our viewAppended: -&amp;gt; method.
    @addSubView new KDButtonView
      title:     &amp;apos;Click Me!&amp;apos;
      callback:  -&amp;gt;
        alert &amp;apos;Clicked :)&amp;apos;

Remember: In CoffeeScript, indentation matters. So make sure this is 
indented so that @addSubView new KDView and @addSubView new KDButtonView 
are at the same indentation level.
And just like that, you have a button in your Application! Lets take a look at 
it:

No surprise, we have added a button into our application. If you click it, it 
will run the code found within the callback option, which in this case is 
alert &amp;apos;Clicked :)&amp;apos;.
The cool part here, is that we didn&amp;apos;t write any HTML. We didn&amp;apos;t write any DOM 
Events. We just wrote some simple JavaScript, and the KDFramework created the 
appropriate events needed.
  Publishing for Testing All of that is well and good, but we came here for a Real World App, right? We 
need this to run outside of DevTools.
If you click the menu in the upper right of DevTools, you&amp;apos;ll see two options.Publish for Testing and Publish to AppStore. Choose Publish for Testing 
for now.
You&amp;apos;ll be presented with an AppStore link for your App, which looks like this:

This added your Application to the AppStore in Private Mode. Only you can 
run this app. But if you click Run, you&amp;apos;ll see that your app does indeed run!

As you can see above, it loads into your App Bar, you&amp;apos;ll get a real URL for it, 
and it is indeed a Real Koding App. This lets you test your app as if it was 
officially published, and use it under real conditions.
  Publishing to the AppStore Testing is all well and good, but eventually you&amp;apos;ll want to publish it right? 
Before publishing, make sure that you have your application source on Github 
with the full application name (Example: 
github.com/yourname/Example.kdapp).
If you&amp;apos;ve got all that, go back to DevTools and choose the Publish to 
AppStore option your App will be published to the AppStore under the 
Unverified Apps Section.
While unverified, users will be able to go into that special section and run 
your application.
Your App will remain in this Unverified state until it is reviewed and approved 
by Koding Moderators. Once they look at it and ensure that your App works 
properly, they&amp;apos;ll approve it! All Koding users will be able to load your 
awesome application, knowing that it is safe and great, and enjoy all the hard 
work you put into it!
  Where to go from here You should now have a good understanding of what Koding Applications are, and 
what the creation, testing, and publishing process is like. Next, you&amp;apos;ll want 
to add awesome functionality and gain a deep understanding of the Koding 
Framework, right?
To do this, proceed to the API Documentation(coming soon) and the 
KDFramework Source. These will cover all of the available Classes, large 
and small, of the Koding Framework.
Thanks for reading, and stay tuned for additions to this guide, going in more 
depth.
</description>
  </item>
  
  <item>
    <title>Creating KDApps</title>
    <link>//learn.koding.com/guides/creating-kdapps</link>
    <pubDate>"2014-04-23T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/creating-kdapps</guid>
    <author>Team Koding</author>
    <description>In this guide series we&amp;apos;ll go over the basics of what KDApps are, from a 
developer perspective, and how to create them. We&amp;apos;ll touch briefly on the 
KDFramework source, but mostly we&amp;apos;ll be linking back to the source for method 
and API references. Lets get started!
  What is a Koding App (KDApp)? Koding Apps are created using the Koding Framework (KDFramework) and live
on the Koding App Store. Koding users 
install KDApps based on interest. It is entirely user driven.
KDApps come in a variety of flavors. On the App store you will find apps
in the games, installers, stacks and several other categories.
</description>
  </item>
  
  <item>
    <title>Creating KDApps: Tools Needed</title>
    <link>//learn.koding.com/guides/creating-kdapps/tools-needed</link>
    <pubDate>"2014-04-23T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/creating-kdapps/tools-needed</guid>
    <author>Team Koding</author>
    <description>Before we go into what Koding Apps are and how to create them, lets go over
required and/or useful knowledge and tools. Don&amp;apos;t forget to checkout the
Useful Tools page after you get through Getting Started.
  Services   Github The Koding App infrastructure utilizes Github for storing app
specific resources (js, images, css, scripts). This enables developers to store
there apps for free without worry, making the Koding app workflow simple.
  Languages   CoffeeScript or JavaScript Koding Applications are primarily programmed in CoffeeScript.
While you can technically use any language, as long as the final output is a
single javascript file named index.js within the root of your App directory.
  Tools   KDC, The Koding Compiler The Koding Compiler, otherwise known as kdc is a small utility to
compile Koding apps to a single index.js file.
This tool comes with your Koding VM, you do not need to install it.
  DevTools DevTools is an application designed to help you develop your app.
It is also used to publish your app. It also comes preinstalled.
</description>
  </item>
  
  <item>
    <title>Creating KDApps: Foundation</title>
    <link>//learn.koding.com/guides/creating-kdapps/foundation</link>
    <pubDate>"2014-04-23T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/creating-kdapps/foundation</guid>
    <author>Team Koding</author>
    <description>This guide will go over the foundation of what a Koding App is, where they are
located, and some general tips. In the following sections we&amp;apos;ll cover creating
applications, modifying them, and publishing them.
  What are Koding apps? Koding applications are essentially WebApps for your VM. More precisely, when
you open a Koding application a single JavaScript file is loaded and executed in
your browser. Once loaded in your browser, the JavaScript of the application is
able to add html to a special DOM element created for it. To do this, it uses
the KDFramework.
The KDFramework covers everything from DOM manipulation to I/O with your VM.
Enabling you to combine the best of HTML5 Interfaces with a full Unix
environment.
  File Structure A Koding application is located in a folder found within the ~/Applications 
directory. This folder is in the format of appname.kdapp, with at least two 
important files in it; A manifest.json file and a index.js file.
Any files beyond this are optional, and depend on whatever the application
author decided that they want. Traditionally KDApps are programmed in
CoffeeScript and compiled into the main index.js file. Technically speaking
you&amp;apos;re free to use whatever language you want, such as JavaScript, Dart,
TypeScript, or LiveScript. Just be aware that the KDFramework itself is written
in CoffeeScript, and much of the usage revolves around Coffee-centric class
structure. At the end of the day though, it&amp;apos;s all &amp;quot;just JavaScript&amp;quot;.
  Compilation When a KDApp is requested, such as by visiting 
https://koding.com/YourAppName, the index.js file is loaded. If it doesn&amp;apos;t 
exist however, a compilation tool called kdc is executed in the application 
directory to compile the files specified in the &amp;quot;files&amp;quot;:[] list.
kdc then compiles the files to JavaScript, and concatenates them one after
another and finally writes the product to the index.js file.
  Creating your first KDApp In the next guide, lets create our first KDApp!
</description>
  </item>
  
  <item>
    <title>Octopress Installation for Beginners</title>
    <link>//learn.koding.com/guides/octopress-for-beginners</link>
    <pubDate>"2014-04-13T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/octopress-for-beginners</guid>
    <author>Team Koding</author>
    <description>In this article we&amp;apos;ll go over the basics of setting up Octopress. Want to skip a few steps? Try the Koding Demo to open Octopress right away!
  What is Octopress? Octopress is a framework built on top of Jekyll, a static site generator. Think of it like easier, friendlier, more powerful Jekyll.
Static site generators get a fair amount of buzz these days, for good reason. They&amp;apos;re simple to maintain, easy to contribute to, and store content in a user friendly manner. The compilation process can sometimes be complex, but at the end of the day your content is understandable by all, and your site has no dependencies to run. No databases to manage, no real points of failure, it&amp;apos;s static.
  Octopress and Koding The only downside to static site generators is publishing the content often requires a local machine of some sort. Non-static sites have the ability to take your input from the browser and save it somewhere such as your Disk or a Database. This complexity allows you to do all of this from your browser, and static sites suffer in this regard.
With Koding this is not the issue. Koding enables the &amp;quot;local machine&amp;quot; entirely in your browser. No local tools needed, no local installs needed, no localhost hassle. Lets go over the process of installing Octopress, on Koding!
  Tutorial Steps 1.) First, we want to get ahold of the Octopress code base. Open your Terminal and run the following two commands to clone Octopress, and navigate into the directory.
git clone git://github.com/imathis/octopress.git octopress 
cd octopress
2.) Next, we need to install some dependencies for Octopress. Run the following commands, which will install Bundle, then use Bundle to install the Octopress dependencies. Lastly, we use rake to set up some directories and initialize our project.
sudo gem install bundle
bundle install
rake install
3.) That&amp;apos;s it for Octopress! But how do we view it? To view it, we need to compile the html and expose that to Apache (our web server). To do this, run the following commands which will generate the html, then symlink our compiled directory as our main Web directory.
rake generate 
mv ~/Web ~/Web.bkp 
ln -s ~/octopress/public ~/Web
4.) Now open up http://username.kd.io and view your hard work!
  All in the browser As always, with Koding, this process was entirely in the browser. No localhost modifications needed, and no worries about installing something incorrectly and mucking up your OS. There is no localhost hassle with Koding!
This has been a getting started tutorial from Koding, with more coming soon. Stay tuned!
</description>
  </item>
  
  <item>
    <title>PrestaShop Installation for Beginners</title>
    <link>//learn.koding.com/guides/prestashop-installation-for-beginners</link>
    <pubDate>"2014-04-09T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/prestashop-installation-for-beginners</guid>
    <author>Team Koding</author>
    <description>In this article we&amp;#x2019;ll go over the basics of setting up PrestaShop. Follow along, or Try the Koding Demo right now!
  About PrestaShop A lot of retail stores these days are turning to online shops. It gives them a different power over the products they are selling and in the era of smart gadgets, consumers can now buy almost anything online.
There are a lot of e-commerce solutions, but a there is one that stands out, PrestaShop. You may have heard of it, because it&amp;apos;s all over the news. It&amp;apos;s one of the most reliable and flexible Open-source e-commerce software out there and with a team of 70 developers and with a community that has more than 500.000 members, it sure is a platform worth developing for.
Luckily you can do that on Koding with ease. So how do you setup a PrestaShop shop on Koding? You just follow the next few simple steps and you&amp;apos;re good to go.
Want to skip a few steps? Jump directly to the PrestaShop installation process using this link!
  Setting up PrestaShop   Step 1. Open up a Terminal window in Koding and type the following commands to get you started. We navigate to our Web folder and then we try to get the latest version of PrestaShop available on their website. In this case PrestaShop 1.5.6.1 [code] cd Web; wget http://www.prestashop.com/download/prestashop_1.5.6.1.zip; [/code]
  Step 2. We unzip the file. [code]unzip prestashop_1.5.6.1.zip[/code]
  Step 3. We can now head over to the setup page and begin the installation procedure. Our link is: [code]http://[your_Koding_username].kd.io/prestashop[/code] All we have to do now is to fill in the required fields to set up the shop.
And that&amp;apos;s it, three simple steps to set up your e-commerce solution. As always, more Quick Tips and beginner friendly guides from Koding coming soon, so stay tuned!
</description>
  </item>
  
  <item>
    <title>Connect with SSH, from Windows</title>
    <link>//learn.koding.com/guides/connect-with-ssh-windows</link>
    <pubDate>"2014-04-08T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/connect-with-ssh-windows</guid>
    <author>Team Koding</author>
    <description>Connecting to your VM with SSH will allow you to use another Terminal, outside 
of Koding, to interact with your Koding VM. This is also required if you&amp;apos;re 
interested in using SSH Tunneling. If you&amp;apos;re connecting with Mac or Linux, have 
a look here.
We are going to be connecting with PuTTY, and we are going to use the 
terminology &amp;quot;local&amp;quot; to represent the machine that you&amp;apos;re connecting to Koding 
with.
Note that PuTTY can be troublesome. You may want to consider Cygwin 
to easily connect with the Unix instructions.
  What you will need 
Your Koding username
Your Koding VM Number
PuTTY
A PuTTY Auth Key. If you need to generate one, please refer to 
this turorial.

  Connecting with PuTTY For this connection method, you will need the PuTTY SSH client suite
putty.exe, plink.exe, and pageant.exe. Note: PuTTY has proven 
difficult to support due to the UI and ease of checking/configuring PuTTY 
incorrectly. With that said, i highly recommend using Cygwin, since it offers a 
real and normal Unix SSH Config. Much easier. 

Copy the text contents of your PuTTY public key. If you are not sure what or where it is, please refer to What you will need.
As in Step #2 of the Linux guide above, paste the entirety of your public key into the SSH Keys section of your Koding account settings.
Start up putty.exe and set the Host Name (or IP address) to the same VM hostname as above:vm-Number.&amp;lt;username&amp;gt;.koding.kd.io
In the Category menu on the left, select Data under Connection. Enter your Koding username in the Auto-login username box.
Select Proxy under Connection, and change the Proxy type to Local. Enter the following line (modified for your system) in the Telnet command, or local proxy command box:C:\your\path\to\plink.exe &amp;lt;username&amp;gt;@ssh.koding.com -nc %host:%port
Go back up to the &amp;quot;Session&amp;quot; settings and save this PuTTY configuration 
to a new session by typing a name into the &amp;quot;Saved Sessions&amp;quot; box, and 
clicking on &amp;quot;Save&amp;quot;.
In Step 7, we will cover setting up your Auth. This can be done two ways, 
and we will cover both. You only need to do one method! Pageant has been 
working for everyone, where as PuTTY-Auth has been a bit problematic but is 
shorter. Choose whichever you like, but if you have issues, try Pagaent Auth 
below.
You&amp;#x2019;re done! You can now connect to Koding via PuTTY.To connect with 
Pageant, you can right click the Pageant Icon, and under &amp;#x201C;Saved Sessions&amp;#x201D; click 
on your Saved Session. This will automatically open up PuTTY and start 
connecting.To connect from PuTTY itself, open PuTTY and select your Saved 
Session from the list, then click Open.An example of a successful Koding 
Connection is below.



  Pageant Auth Open pageant.exe. It will launch into your Taskbar.  Right click the Pageant icon in the taskbar, and 
select &amp;quot;View Keys&amp;quot;. From there, click the &amp;quot;Add Key&amp;quot; button. Navigate to 
your PuTTYGen private key and click &amp;quot;Open&amp;quot;. You should now have a key 
listed in your Pageant Key List. An example image is below.  If your key has been added to the Pageant Key List, 
close the window. 
  PuTTY Auth Reopen PuTTY and select your Session, then click Load. Next, under the 
Connection menu, open up the SSH menu and select Auth. Enable the Allow 
agent forwarding checkbox. Under Private key file for authentication, browse 
to your PuTTYGen private key.

Next, Plink needs to know the explicit location of your key. So go back to 
&amp;quot;Proxy&amp;quot; under &amp;quot;Connection&amp;quot; and look for the &amp;quot;Telnet command, or local 
proxy command&amp;quot; box.  Currently, it should look like this:
C:\your\path\to\plink.exe &amp;lt;username&amp;gt;@ssh.koding.com -nc %host:%port
Modify it, by adding your private key location. So, it will look like this:
C:\your\path\to\plink.exe -i c:\path\to\private\key.ppk &amp;lt;username&amp;gt;@ssh.koding.com -nc %host:%port
  Important note If you&amp;apos;re having trouble SSH-ing into your VM, after pasting your SSH key in the box located in your Koding account settings, make sure there are NO SPACES in the key other than the one after ssh-rsa and one before your email address.
</description>
  </item>
  
  <item>
    <title>Connect with SSH, from Unix</title>
    <link>//learn.koding.com/guides/ssh-into-your-vm</link>
    <pubDate>"2014-04-08T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/ssh-into-your-vm</guid>
    <author>Team Koding</author>
    <description>Connecting to your VM with SSH will allow you to use another Terminal, outside 
of Koding, to interact with your Koding VM. This is also required if you&amp;apos;re 
interested in using SSH Tunneling. If you&amp;apos;re connecting with PuTTY, have a look 
here. If you&amp;apos;re using Cygwin, these instructions will work 
fine for you.
We are going to use the terminology &amp;quot;local&amp;quot; to represent the machine that 
you&amp;apos;re connecting to Koding with.
  What you will need 
Your Koding username
Your Koding VM Number
Generated SSH Keys on your local machine. If you need to generate them, 
Github has an awesome tutorial found here.

  Connecting with OpenSSH or Cygwin 
First, copy your Public Key, usually found in ~/.ssh/id_rsa.pub, and copy 
it in its entirety! It will look something like this:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyhKankDE4DRM86JqZ3JPdWDeqg+TbzlqlTLf 
OKTeokhRoMgy5WoMY/ZWUVES3d2vSHHwW3cwWlELmVdc3Ow57boZv3fOsPhybYHVRTClXYr1ncS 
xyTvjvCfvV5q22aIxHPWQ353543ssda87sa+85XEa4VnveJsEzxBZl4oJ4GB0AGa48+UdIqutrg 
Zu7D7JCK+Yl228X+3bJf3ddlqDaKaVXPivvvYqImK6ZwFsxh2lNO4E8IOd3OSK9zv6i+io8PxWm 
wP0tLFokxulAI8Td1sOPBE9s9bdJ5c2T/GfGjKF+aNKsd33TsYEjjc/plMZmRRrOgQwre6OAkgM 
vyV2X foo@bar.baz

Next, paste this entire Public Key into your SSH Keys section of your 
Account settings. This can be found by going to 
Koding/Account and clicking SSH Keys under the 
DEVELOP. Click the Plus button on the right side of the page, and paste your 
Public Key into this. Below is a screenshot of this area for clarification.  


Now go back to your local machine, and create the file ~/.ssh/config 
(assuming it&amp;apos;s not already created). Add the following code into that file:
Host *.kd.io
 User &amp;lt;username&amp;gt;
 ProxyCommand ssh %r@ssh.koding.com nc %h %p
Where &amp;lt;username&amp;gt; is your username, without the &amp;lt;&amp;gt;.

Next, on your local machine and connect to your VM! This can be done by 
typing:
ssh &amp;lt;vm-Number&amp;gt;.&amp;lt;username&amp;gt;.koding.kd.io
An example, here is my connection command:
ssh vm-0.leeolayvar.koding.kd.io
You will have to enter your local SSH password, if you chose one when you 
created your key. After that, presented with username@vm-X:~$, signaling that 
you have connected successfully.This step has quite a few Gotchas so please 
review them below.Two likely gotchas, are Agent Failure and 
ssh_exchange_identification, which can be seen in the Possible Gotchas section 
below.

  Alternate id_rsa If you&amp;apos;re using an alternately named id_rsa file, you can modify your 
config to support this with the following example.
Host *.kd.io User &amp;lt;username&amp;gt;
 IdentityFile ~/.ssh/alternate
 ProxyCommand ssh -i ~/.ssh/alternate %r@ssh.koding.com nc %h %p
Note the IdentityFile ~/.ssh/alternate and -i ~/.ssh/alternate, they tell 
SSH the location of your public key, and are required. Replace the file 
location with the location of your alternate key.


  Important note If you&amp;apos;re having trouble SSH-ing into your VM, after pasting your SSH key in the box described above, make sure there are NO SPACES in the key other than the one after ssh-rsa and one before your email address.
</description>
  </item>
  
  <item>
    <title>PostgreSQL on Koding</title>
    <link>//learn.koding.com/guides/postgresql-on-koding</link>
    <pubDate>"2014-04-07T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/postgresql-on-koding</guid>
    <author>Federico Ponzi</author>
    <description>PostgreSQL comes preinstalled with all Koding VMs. First of all, run the service:
sudo service postgresql start
  * Starting PostgreSQL 9.1 database server
     ...done.
Or you will get an error like this:
psql: could not connect to server: No such file or directory
Is the server running locally and accepting
connections on Unix domain socket &amp;quot;/var/run/postgresql/.s.PGSQL.5432&amp;quot;?
To getting started with postgreSQL, open your Terminal, and type:
username$ sudo su - postgres
Now you are logged into your vm with the postgres user. Then connect to template1 database using the postgresql&amp;apos;s psql client:
postgres@vm-0:~$  psql template1
postgres@vm-0:~$  template1=#
Note the # symbol, declaring that you are logged to the database as a Super User. Now for enchaned security change your default postgres&amp;apos;s password:
template1=# \password
Enter new password:
Enter it again:
Nice, we are near the end: now create a new user with createdb permission with same username of your vm. So if your username is koding02, your prompt should be like:
koding02@vm-0:~$
Create a new user using the CREATE USER command like this:
template1=# CREATE USER username
template1-# WITH PASSWORD &amp;apos;password&amp;apos; createdb;
CREATE ROLE
template1=#
You are done configurating PostgreSQL! Now disconnect from the database using \q, and quit from postgres user using ctrl+d.
Now you can create a new database using the command:
createdb myFreshNewDb
And delete it using the deletedb tool:
deletedb myFreshNewDb
Once you have created a database, you can connect to it using the psql client like we did before:
psql myFreshNewDb
myFresNewDb=&amp;gt;
  Using Psql client Let&amp;apos;s see some useful commands of the psql tool. 
First of all: you can get some help just typing \? in your psql command line.
To exit from the appearing screen, just press the q button.
To load and execute SQL statemens from file, you can use this syntax:
\i my/file/path.sql
Writing long lines of SQL code in the command line can be really hard to debug. Use the \i to run from file or use:
\e
To edit the input buffer with an editor. If you usually don&amp;apos;t use editor from command line use nano - it&amp;apos;s the simplest.
To check what relations your database contains, use
\d
If you want more information about a particular relation, use
\d myfancytable
Have fun!
</description>
  </item>
  
  <item>
    <title>Bootstrap 3 setup for Beginners</title>
    <link>//learn.koding.com/guides/bootstrap-3-quick-tip</link>
    <pubDate>"2014-04-03T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/bootstrap-3-quick-tip</guid>
    <author>Team Koding</author>
    <description>With the recent Bootstrap release, we felt it would be handy to go over the very basics of setting up its latest incarnation, Bootstrap version 3. If you haven&amp;apos;t heard, Bootstrap 3 offers significant changes over the previous versions. One of my favorites being Mobile First, and Always Responsive! Meaning that it is now very easy to design your layouts to support devices of multiple sizes all within a single layout. 
  Bootstrap 3 has me sold, what does it look like? To see what it looks like, lets show a full example of setting up a Bootstrap 3 example on Koding! Lets dive into the video below. 
And there you have it! Koding Virtual Machines come with Apache already serving up your Web files, so you can develop Bootstrap on Koding while previewing your work on a real domain, accessible to anyone you like, and all of this for free. The way browser based development should be! 
  Could it get easier? Why yes, it could! If you&amp;apos;re signed up and logged in to Koding, click this Teamwork Import you can continue with Bootstrap 3 where we left off in the video! With Koding, we aim to make learning easier :) We&amp;apos;ll be releasing many more Quick Tips in the coming weeks, stay tuned!
</description>
  </item>
  
  <item>
    <title>CakePHP Installation for Beginners</title>
    <link>//learn.koding.com/guides/cakephp-for-beginners</link>
    <pubDate>"2014-04-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/cakephp-for-beginners</guid>
    <author>Team Koding</author>
    <description>In this article we will installing CakePHP for beginners. Follow along, or try the Try the Koding Demo right now! 
  What is CakePHP? CakePHP is a popular PHP framework created with ease of use, small codebase, and MVC in mind. It&amp;apos;s also being actively developed, with two point releases in the last month alone. With a solid codebase, a supportive community, and active developers, it is a strong choice for any project. 
  CakePHP and Koding Of course, CakePHP is especially easy on Koding. Developing locally means you need to already have a php framework up and running, as well as a database (MySQL for example). This becomes even more troublesome if you want to share your work with coworkers or friends. Exposing your ports to the outside world, finding your ip, and then sharing it. Thankfully on Koding this is a one step process. You already have the entire LAMP stack available to you, all from your browser. Likewise, sharing with your friends is as easy as sharing your Koding Domain. So, lets use Koding, shall we? 
  Installing CakePHP Steps 1.) On the homepage of CakePHP, copy the download link for the latest version of CakePHP. In this case we&amp;apos;re going to be using CakePHP 2.4.2. 2.) Open your Koding Terminal and type in wget -O cake.zip and then paste your download link with Ctrl-Shift-V. As an example, it should look like this: wget -O cake.zip https://github.com/cakephp/cakephp/zipball/2.4.2 3.) On the left hand side, in the Koding FileTree, right click your file and choose Extract. This will extract your downloaded Cakezip into the directory cake/. Expand that directory, and you&amp;apos;ll see a directory with a name similar to cakephp-cakephp-f53efef. 4.) Drag that into your Web/ directory. You can rename this directory to &amp;quot;cake&amp;quot;, or whatever you like, as this will make it easier to type in your browser. 5.) Finally lets ensure that we have Apache&amp;apos;s mod_rewrite enabled. Run sudo a2enmod rewrite &amp;amp;&amp;amp; sudo service apache2 restart just to be safe. If you already have mod_rewrite enabled, you can skip this step. 6.) The last step is a security step enforced by CakePHP. Open up app/Config/core.php and look for the following two lines. Edit the DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mi and 76859309657453542496749683645 strings to have randomized content for your deploy. Just remember that the second string is numbers only. [code]/  A random string used in security hashing methods. / Configure::write(&amp;apos;Security.salt&amp;apos;, &amp;apos;DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mi&amp;apos;); /  A random numeric string (digits only) used to encrypt/decrypt strings. / Configure::write(&amp;apos;Security.cipherSeed&amp;apos;, &amp;apos;76859309657453542496749683645&amp;apos;);[/code] 7.) That&amp;apos;s it! Now just open up http://username.kd.io/cake in your browser, making sure to use your own username in the username url, and you&amp;apos;ll see Cake up and running! 
  Can i skip some steps? Of course! Simply Try the Koding Demo and you&amp;apos;ll have CakePHP downloaded and open in seconds. Then just follow along with the editing steps. Awesome! 
  All in the browser Thanks to Koding, our only requirement to get cake downloaded and running, in the browser. No special OS installation steps, no need to set up your own LAMP stack, no localhost hassle. This has been a beginner guide for CakePHP from Koding and we have more tutorials and guides on the way soon. Stay tuned!
</description>
  </item>
  
  <item>
    <title>Mixpanel Setup and Usage for Beginners</title>
    <link>//learn.koding.com/guides/getting-started-with-mixpanel</link>
    <pubDate>"2014-03-17T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-with-mixpanel</guid>
    <author>Team Koding</author>
    <description>If you have a website or application, you likely need to know what your users are doing on it. Where they are going and what they are doing can give you loads of information about your product. Popular features, unwanted features, painful user experiences, analytics are the source for a massive amount of information.
Traditional analytics platforms would simply track the urls of your visits, and aggregate this data into meaningful information. This works great for web sites, but can become an issue in the world of web applications. Single page web applications especially. Many of these web applications only have a handful of urls, with a vast wealth of buttons, forms, inputs and outputs that all represent potential data that needs to be tracked.
This is where Mixpanel comes in. Mixpanel tracks &amp;#x201C;events&amp;#x201D;, which can be anything from a user clicking a button, to a user scrolling to the bottom of a Terms of Service page. Events are generic, and triggered by calling a JavaScript function. This flexibility means that anything that happens in your web application can be an event.
  Mixpanel sounds great, how can i get started? In the following video we&amp;#x2019;ll go over setting up Mixpanel. We also need an event to trigger Mixpanel, so as an added bonus we setup a basic Youtube Iframe API example to trigger the Mixpanel event when the user presses play.
And there you have it! The Youtube Iframe API allowed us to fire a Mixpanel Event every time a viewer presses Play on our video.
Now that you&amp;#x2019;ve seen the very basics of Mixpanel, why not try out our Teamwork Import to continue where the video left off. Just add your own Mixpanel ID into the JavaScript and you&amp;#x2019;re good to go! Koding will handle serving the content up on your user domain, and because you&amp;#x2019;re using Teamwork collaboration with your team is easy!
This has been a beginner guide and video from Koding. As always, more Quick Tips and beginner friendly guides coming soon, so stay tuned!
</description>
  </item>
  
  <item>
    <title>Setting up WebDav on Koding</title>
    <link>//learn.koding.com/guides/setting-up-webdav-on-koding</link>
    <pubDate>"2014-03-16T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-up-webdav-on-koding</guid>
    <author>Team Koding</author>
    <description>This tutorial will cover the basics on how to set up WebDav on Koding and then connect to it using a Mac, Windows or Ubuntu machine. We already know how to set up FTP and SSH, but what about WebDav? Just follow the steps below. 
  Steps The first step is to open up the Terminal app and type the following commands. 
sudo a2enmod dav
sudo a2enmod dav_fs
sudo nano /etc/apache2/sites-enabled/000-default
When the file opens from the last command, we just paste in this configuration and save it. 
Alias /webdav1 /var/www/WebDAV1
&amp;lt;Directory /var/www/WebDAV1/&amp;gt;
 Options Indexes MultiViews
 AllowOverride None
 Order allow,deny
 allow from all
 &amp;lt;/Directory&amp;gt;
&amp;lt;Location /webdav1&amp;gt;
 DAV On
 AuthType Basic
 AuthName &amp;quot;webdav1&amp;quot;
 AuthUserFile /etc/apache2/webdav.password
 Require valid-user
&amp;lt;/Location&amp;gt;
The third step is to create the folder that will be used to store the files. You can do this by entering these commands: 
cd ~/Web
mkdir WebDAV1
chown -R www-data.www-data WebDAV1
The last step is to set up a password, of your choosing, and after that to restart the Apache server. You can do this by entering the commands below, where is your Koding username. 
sudo htpasswd -c /etc/apache2/webdav.password &amp;lt;USERNAME&amp;gt;
sudo service apache2 reload
Just remember to restart the Apache server so that all the settings that we made so far are remembered, and you&amp;apos;re good to go. Now, what about connecting to it? Sure. It&amp;apos;s super simple stuff. We can check if our WebDAV works by heading over to http://.kd.io/webdav1 and then when the box pops up we just enter our username and the password we set up earlier. For local connection you can follow these steps. 
  On Mac OS The Apple support website offers the quickest solution to our problem. Just follow the guide located here. 
  On Windows OS On a Windows machine we need NetDrive. You can download it by clicking this 
link. After we install 
and open it, we need to add a New Site.  The 
settings are as followed: 

Site Name: Koding
Site IP or URL: http://.kd.io/webdav1
Server Type: WebDav
Drive: 
Account: 
Password: 
We then hit connect and it should work. 

  On Ubuntu On Ubuntu we can quickly test and use our newly created WebDav by using just the command line. First we need to install cadaver. Cadaver is a command line WebDav client. 
sudo apt-get install cadaver
After that we connect to our WebDav like this 
cadaver http://&amp;lt;username&amp;gt;.kd.io/webdav1/
After the connection is established we enter our username and password and we&amp;apos;re good to go. 
cadaver http://&amp;lt;username&amp;gt;.kd.io/webdav1
Authentication required for test on server `http://&amp;lt;username&amp;gt;.kd.io/webdav1`:
Username: &amp;lt;username&amp;gt;
Password: *******
dav:/webdav1/&amp;gt; quit
Connection to `http://&amp;lt;username&amp;gt;.kd.io/webdav1` closed.
That is all. If you have any issues setting up WebDav you can drop an email at support@koding.com
</description>
  </item>
  
  <item>
    <title>PyroCMS Setup and Installation for Beginners</title>
    <link>//learn.koding.com/guides/pyrocms-installation-for-beginners</link>
    <pubDate>"2014-03-09T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/pyrocms-installation-for-beginners</guid>
    <author>Team Koding</author>
    <description>This article will cover the basic steps on how to setup a blog using PyroCMS as the base. You can skip the step-by-step tutorial down below and start directly from the PyroCMS setup process by using this link.
  What&amp;apos;s PyroCMS? Good question. It&amp;apos;s a really simple, flexible and community driven CMS built with the CodeIgniter PHP framework that has an on-growing community of developers and supporters around it.
But how do you set up PyroCMS on Koding? Well it&amp;apos;s simple, you just follow the simple tutorial below step by step. After you&amp;apos;ve finished with the tutorial you&amp;apos;ll have a brand new website that runs PyroCMS.
  Step-by-step PyroCMS   Step 1. Open up your Koding Terminal and type in the following command to get you started. [code]cd Web;[/code]
  Step 2. Still in the terminal window download the source code like so: [code]wget https://www.pyrocms.com/downloads/v2.2.3[/code] or whatever the latest version you can find on the official website.
  Step 3. We rename the downloaded file, unzip it and rename the newly created folder. [code] mv v2.2.3 v2.2.3.zip; unzip v2.2.3.zip; mv pyrocms-pyrocms-08759da pyrocms [/code]
  Step 4. We now can navigate to our newly created folder. We open up a new browser window and type in [code]http://[your-Koding-username].kd.io/pyrocms[/code] then just follow the steps that show up on the screen to install it.
Alright then, that was fun. You now have a brand new website that runs PyroCMS.
This has been a beginner guide from Koding. As always, more Quick Tips and beginner friendly guides coming soon, so stay tuned!
</description>
  </item>
  
  <item>
    <title>AngularJS Step-by-Step Setup</title>
    <link>//learn.koding.com/guides/angularjs-step-by-step</link>
    <pubDate>"2014-03-09T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/angularjs-step-by-step</guid>
    <author>Team Koding</author>
    <description>This article is all about AngularJS and how to get you started with it on Koding. Follow along, or Try the Koding Demo right now! 
  AngularJS: What&amp;apos;s it all about. Everything is dynamic these days, or at least in should be. The age of the static documents is slightly fading away and people like to interact with websites and applications in real-time. Queue frameworks that offer dynamism to web apps. These frameworks offer an endless list of possibilities and give developers free reign over how people interact with their application, in real-time. One of the most popular frameworks these days, that is starting to be approached by more and more developers is AngularJS. AngularJS can be used with any application development workflow due to the fact that it&amp;apos;s extensible and because it works well with other libraries. 
  Setting it up on Koding Ok, but how can we develop a web application in the cloud and preview the 
result a the same time? It&amp;apos;s easy, we use Koding!Koding&amp;apos;s built-in preview system enables you to preview 
your progress with a single click. It&amp;apos;s as simple as 1,2,3. So let&amp;apos;s get 
started then. First we create a new .html file using the Ace editor app, that 
comes pre-installed with Koding, or any editor you prefer 
or have installed. The next step is to head over to the AngularJS 
website and get one of their simple examples. For this 
tutorial we&amp;apos;re going to use the first tutorial that comes up, a simple &amp;quot;Hello!&amp;quot; 
example. We copy that and paste it into our file, the one that we created 
earlier.
&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;script 
    src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js&amp;quot;&amp;gt;
  &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;label&amp;gt;Name:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&amp;quot;text&amp;quot;
        ng-model=&amp;quot;yourName&amp;quot;
        placeholder=&amp;quot;Enter a name here&amp;quot;&amp;gt;
      &amp;lt;hr&amp;gt;
      &amp;lt;h1&amp;gt;Hello {{yourName}}!&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

We can now save our file and check out the result, by clicking the little 
&amp;quot;hamburger&amp;quot; menu in the top right corner of Ace editor and then choose Preview.The example we got should display nicely. Go ahead and test to see if it works.Simple and fun! If you want to skip the steps above you can try our Koding 
demo 
and see how it goes. And that&amp;apos;s it. Why not continue and experiment with 
AngularJS on Koding and see what more cool stuff you can 
make. As always, more Quick Tips and beginner friendly guides coming soon, so 
stay tuned!
</description>
  </item>
  
  <item>
    <title>How to create a Playground for Teamwork</title>
    <link>//learn.koding.com/guides/creating-playgrounds</link>
    <pubDate>"2014-03-09T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/creating-playgrounds</guid>
    <author>Team Koding</author>
    <description>In this article we will go over the simple process of adding your own Playground to the official Teamwork Playground list.
  The publication process First, create your awesome Playground content. After completing your content for your Playground, all that you need to do is edit two files and create a merge request on Github. Once merged, your Playground will be published instantly.
  Creating a playground To get started, clone Koding&amp;apos;s Teamwork Repository and go to the Playgrounds folder. Once there, open up manifest.json.
In the manifest.json, you will see lots of Playground configs. Add your own config here, in the same format. A sample Facebook Config is below.
[code] { &amp;quot;name&amp;quot;: &amp;quot;Facebook&amp;quot;, &amp;quot;manifestUrl&amp;quot;: &amp;quot;https://raw.github.com/koding/Teamwork/master/Playgrounds/Facebook.json&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Facebook Playground&amp;quot;, &amp;quot;icon&amp;quot;: &amp;quot;https://teamworkcontent.s3.amazonaws.com/covers/facebook.png&amp;quot; } [/code]
The config details are explained below:

name The name of your Playground. It must be unique.
manifestUrl The url of the your Playground&amp;apos;s manifest file. We will cover the manifest file content in a moment.
description A few words about of your Playground.
icon The cover icon of your Playground. It must be 240px by 240px. It 
will be used on the Teamwork Playgrounds Modal, see below for an example. 


Now it&amp;apos;s time to create your Playground&amp;apos;s manifest file. This file is used to customize Teamwork for your Playground, allowing you to easily change look and feel and the functionality. As an example, Click here to see an example of the Bootstrap Playground Manifest file.
[code] { &amp;quot;name&amp;quot;: &amp;quot;AngularJS&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;1.2.0&amp;quot;, &amp;quot;styling&amp;quot;: { &amp;quot;textColor&amp;quot;: &amp;quot;#FFF&amp;quot;, &amp;quot;textShadowColor&amp;quot;: &amp;quot;none&amp;quot;, &amp;quot;borderColor&amp;quot;: &amp;quot;#e52a3a&amp;quot;, &amp;quot;bgColor&amp;quot;: &amp;quot;#e52a3a&amp;quot;, &amp;quot;bgImage&amp;quot;: &amp;quot;https://teamworkcontent.s3.amazonaws.com/icons/angularjs.png&amp;quot; }, &amp;quot;content&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;zip&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;https://teamworkcontent.s3.amazonaws.com/zipfiles/AngularJS.zip&amp;quot; }, &amp;quot;run&amp;quot;: { &amp;quot;handler&amp;quot;: &amp;quot;preview&amp;quot;, &amp;quot;command&amp;quot;: &amp;quot;https://$USERNAME.kd.io/Teamwork/AngularJS&amp;quot; }, &amp;quot;initialState&amp;quot;: { &amp;quot;preview&amp;quot;: { &amp;quot;url&amp;quot;: &amp;quot;https://$USERNAME.kd.io/Teamwork/AngularJS&amp;quot; }, &amp;quot;editor&amp;quot;: { &amp;quot;files&amp;quot;: [ &amp;quot;./index.html&amp;quot; ] } } } [/code]
Next we&amp;apos;ll cover all the properties of the manifest file:

name The name of your Playground. Keep it short and meaningful.
version The version of your Playground. If you make a Playground for a framework like AngularJS then you may want to use it&amp;apos;s version number as your Playground&amp;apos;s version. Otherwise it&amp;apos;s a good idea to start your version number by 0.1. Let&amp;apos;s say, you add new examples to your Playground and want to publish latest content, you need to update version number and Teamwork users will be prompted again to download latest content.
styling The styling options that will be applied to Teamwork&amp;apos;s header. With these styling options, you can change text color, background color and even the logo of Teamwork and make your Playground unique.
textColor The color of the title. Default is #4c4c4c.
textShadowColor Pass a color if you want to add shadow of your title, otherwise pass none. This defaults to none.
borderColor The Teamwork header has 3px solid #c7c7c7 border at the bottom. Pass a color to override it.
bgColor Background color of the header.
bgImage Logo of your Playground. It must be 37px by 37px. Otherwise it will be forced to that size. Default is Teamwork Logo.
content Let Teamwork know where your Playground content is located. The content config requires two properties, type and url. Currently the only supported content type is zip. So your content must be zipped and put a publicly available location.
run With this config option, you can execute a command in the Terminal or open a web page on Teamwork&amp;apos;s Previewer. The run config requires 2 properties, handler and command.
handler Handler defines which Teamwork pane will be visible and do something when user clicked to Run button. It should be terminal or preview.
command The command that will be run on Terminal or opened by Preview. We give you some placeholders to deal with the active state of Teamwork.
$ACTIVE_FILE_PATH This placeholder can be used with Terminal. If your command includes this placeholder, it will be replaced by the active file&amp;apos;s path on the editor.
$USERNAME This placeholder can be used with Preview or Terminal. If your command includes this placeholder, it will be replaced by the Teamwork&amp;apos;s session owner username.
initialState This config will be used to decorate the Teamwork panes after it became ready. For example you can open a web page or open your default files to editor when you Playground opened.
preview Define a preview object and url property in it to open a web page. You can use some placeholders inside of url. See the documentation for command.
editor Define a editor object and files property in it to open the files you want. files must be an array that contains file paths. It must start with ./ which defines the root of your zip file.
prerequisite This config will be used to check your Playground is ready if you have something to do before it opened. For example, each time user has opened the Wordpress Playground, we have to check a database named wordpress. prerequisite config requires two parameters, type and command. Currently only implemented pre-requisite type is sh. So this means your command will be run on Terminal before user start to interact with your Playground.

With this article in hand you should be ready to get started making your very own Playgrounds and contributing to the community. As always, ask in the Activity Feed if you have any questions.
Now go make some awesome content :)
</description>
  </item>
  
  <item>
    <title>MySQL on Koding</title>
    <link>//learn.koding.com/guides/mysql-on-koding</link>
    <pubDate>"2014-03-08T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/mysql-on-koding</guid>
    <author>Team Koding</author>
    <description>MySQL comes preinstalled with all Koding VMs, and can be logged into by typing the following command into your Koding Terminal
mysql -uroot
You should note that the -p flag is not included in that command. That is because there is no root user password by default. You can assign a password with the following command:
mysqladmin -u root password
When entering MySQL login details into your applications, make sure you log in from localhost, not your VM Hostname.
  Troubleshooting MySQL Socket Error
If you receive a socket error with the above commands, your MySQL Server is not running. To start it, type the following command:
sudo service mysql start
</description>
  </item>
  
  <item>
    <title>TogetherJS Setup and Usage for Beginners</title>
    <link>//learn.koding.com/guides/togetherjs-setup-for-beginners</link>
    <pubDate>"2014-03-05T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/togetherjs-setup-for-beginners</guid>
    <author>Team Koding</author>
    <description>In this article we will go over beginner steps for TogetherJS. Follow along, or Try the Koding Demo right now! 
  What is TogetherJS? TogetherJS is a drop-in collaboration framework. Think of it like easily adding Google Docs to any site. Normally when you program a real time site, you use a framework like SocketIO, SockJS, or Firebase, and it takes a considerable amount of work just to make content sync up between clients. Adding text chat/mouse tracking/voice chat is a lot of additional work that is often outside the scope of your project. TogetherJS takes away that problem. You focus on your application, and TogetherJS can focus on the difficulty of mouse tracking. With just two lines of code, you get all of these features. Easy! 
  Setting up TogetherJS In the following example, we&amp;apos;ll setup TogetherJS by using a plain html page and the TogetherJS Scripts. 
And just like that, we have a static page with text chat, voice chat, and mouse tracking built into our html page! And because we used Koding we can share this project with our friends easily. On localhost you would have to run a web server, expose and forward your ports, figure out your ip, and finally share it with a friend. Koding saves you that localhost-hassle, and makes this a one-step process. Just share your domain and you&amp;apos;re done. 
  Could it get easier? Of course! With Teamwork, all that you have to do is click this Teamwork Import link you can continue right where the video left off! This has been a tutorial article and video by Koding, with more on the way soon. Stay tuned!
</description>
  </item>
  
  <item>
    <title>EmberJS: A Starting Kit for Beginners</title>
    <link>//learn.koding.com/guides/emberjs-starting-kit</link>
    <pubDate>"2014-03-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/emberjs-starting-kit</guid>
    <author>Team Koding</author>
    <description>Ambitious applications are the future. The way we interact with a web application will impact our productivity. That&amp;apos;s why in this short tutorial we are going to cover some of the basics of EmberJS. If you want to skip the tutorial and get right in the action you can try our Koding demo. 
  EmberJS: The facts They say that if you use EmberJS you don&amp;apos;t have to reinvent the wheel. Well we say that they are right. EmberJS is built for developers by developers. It&amp;apos;s friendly, fast and definitely a good alternative if you want to build something awesome. And we here at Koding like it when people build awesome stuff, therefor this tutorial is here to help you get started with one of the most on-growing and well-built frameworks out there. Right, now let&amp;apos;s get started on how to set up EmberJS on Koding. 
  The Steps   Step 1. We open up a new file using your favorite code editor inside Koding, because as you may know, you have Ace pre-installed or maybe you&amp;apos;re a Vim or Emacs individual. For the sake of this tutorial we are going to use the Ace editor. 
  Step 2. We copy and paste the following code into are newly created file. [code] &amp;lt;!doctype html&amp;gt;    Ember Koding Demo          [/code] Ok now that we saved the file and opened up the preview and saw that everything worked as it should let&amp;apos;s explain a bit what is actually happening. First, before everything, we need the following libraries that make our EmberJS app work: jQuery, handlebars and of course emberJS. The app uses handlebars for templating. After we set up the template and loaded the libraries we need to create the actual app. First we initialize ember and then we use a Router that helps to manage the state of the application and the resources needed as a user navigates the app. In our case set some content using the already created template that was made possible with the help of the handlebars library. And there you have it. A short tutorial on how to use EmberJS on Koding. Don&amp;apos;t forget if you want you can try out the Koding demo by following this link. As always, more Quick Tips and beginner friendly guides from Koding coming soon, so stay tuned!
</description>
  </item>
  
  <item>
    <title>Firebase setup and usage for beginners</title>
    <link>//learn.koding.com/guides/getting-started-firebase</link>
    <pubDate>"2014-02-27T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-firebase</guid>
    <author>Team Koding</author>
    <description>In this beginner tutorial we will go over the basics of Firebase. Follow along, or Try the Koding Demo right now!
  What is Firebase? Adding real time elements can be an awesome addition to almost any web application. Even plain websites can benefit greatly from real time elements. From user content updating in real time to notifying visitors about that newly made blog post, there are quite a few options when creating real time content.
The challenge comes with actually implementing them. You often have to support multiple required methods to update clients such as Polling or WebSockets, and as always many browsers have unique quirks that can mutate and twist your well thought out plans into a hacky mess. Most people choose frameworks like SockJS or SocketIO to abstract away the pain, but even with these frameworks you still need to be running server logic to handle persistent connections and events. This server side logic isn&amp;#x2019;t too hard either, but it really depends on your needs. If you&amp;#x2019;re using Wordpress or a Content Management System, server side logic is probably not something you desire messing with.
  Along comes Firebase Firebase handles these problems by going one step further than SockJS and SocketIO. Instead of just abstracting the protocols used to communicate real time data with the client, Firebase abstracts the server too. What does this mean? Well, it means with just a few lines of JavaScript, you can have a real time application. No servers to manage, no protocols to manage, just a few calls to JavaScript and your data in real time.
  Sounds great, what does it look like? In the following short video, we go through the super-easy process of setting up an existing page to take input from one connected client and broadcast it to all connected clients. For reference, we&amp;apos;re using the chat example found here.
Just like that, our previously static html page has real time elements! No server setup, no complications, just Firebase.
  Could it be easier? Of course! With our Teamwork Import you can continue right where the above video left off. And of course, by using Koding, this entire process was in your browser. As easy as you could want, with no localhost hassle.
More getting started guides are coming soon, so stay tuned!
</description>
  </item>
  
  <item>
    <title>Getting started with Facebook Application Development</title>
    <link>//learn.koding.com/guides/getting-started-with-facebook-app-dev</link>
    <pubDate>"2014-02-26T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-with-facebook-app-dev</guid>
    <author>Team Koding</author>
    <description>  You no longer need your localhost to make Facebook Apps! Facebook application development can be giant pain, setting up your credentials, make it work with your localhost:3000 website. No more. Register an account at Koding, we will give you a linux environment where you can make your first facebook app in no time.
Below is what you see when you first visit Teamwork&amp;apos;s Facebook Environment.

The instructions explain how to create an application on Facebook, and then tell Koding what the details of your application are.
After you have entered your Facebook Application details, click done. That&amp;apos;s it!
Koding has stored your application details in your project, so all you have to do is learn, create, and enjoy your new application.

If you need any help, next to the Run button there is a question mark button. When used, this button will pop up helpful information related to the current example.
Now if you click the Run button, a preview window will popup showing your application running on Koding. If you click the arrow next to Run, you&amp;apos;ll be given an additional option to Run this application directly on Facebook!
  Easiest Facebook Application development? Yes please!   More to Come With Playgrounds, we hope to create an easy way for you to start all sorts of new projects. Convenient for experienced developers looking to quickly boilerplate their project, and educating for users who might be having trouble with the basics. Our Facebook Playground is just one in a long line of Playgrounds that we will be adding.
And because these playgrounds run within the Teamwork app, real time collaboration works out of the box. Just share your session id with your friends or team members, and collaborate!
Lastly, in the near future we&amp;apos;ll be putting out documentation on how to contribute to these environments. Allowing you to give back to the community with whatever playgrounds you might want.
So stay tuned! The future for the Teamwork app looks quite bright :)
</description>
  </item>
  
  <item>
    <title>Koding Subdomains and VHosts</title>
    <link>//learn.koding.com/guides/vhosts-and-subdomains</link>
    <pubDate>"2014-02-21T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/vhosts-and-subdomains</guid>
    <author>Team Koding</author>
    <description>In this frequently asked question we&amp;apos;ll go over setting up a Koding subdomain to point to a directory of your choice. 
  Creating Subdomains Subdomains can be created from Your Environments, by clicking on the Domains Plus button. For further help see the Domain Management Guide. 
  Creating a VHost 
First, run the command sudo touch 
/etc/apache2/sites-available/mysubdomain where mysubdomain is the name 
of your subdomain.
Next, open the above file with nano, vim, or whatever command line 
editor you prefer. We&amp;apos;re using a command line editor, because files 
located in /etc/apache2/sites-available are owned by root, and 
require sudo. As an example, the command you might be running is: sudo 
nano /etc/apache2/sites-available/mysubdomain
Now that you have the file open with your preferred editor, paste in 
the following code:

&amp;lt;Virtualhost *:80&amp;gt;
  ServerName mysubdomain.username.kd.io
  DocumentRoot /var/www/myDirectory
&amp;lt;/Virtualhost&amp;gt;

There are a two things you&amp;apos;re going to have to change here, so lets go over them.

ServerName: The value of ServerName should be your full subdomain url, without the http. For example: ServerName hello.leeolayvar.kd.io
DocumentRoot: This is the folder location that you want the subdomain to direct to. Remember that /var/www equals ~/Web, so in the given example, /var/www/myDirectory equals ~/Web/myDirectory. Note: The DocumentRoot has to be an absolute path. Relative directories such as /var/www/../foo and ~/MyDirectory will not work. If you would like to supply an directory outside of ~/Web, use your full home path, eg: /home/leeolayvar/myNotWebDirectory
Lastly, we need to add our &amp;quot;site&amp;quot; and reload apache. Run the following two commands: 
sudo a2ensite mysubdomain
sudo service apache2 reload
Where mysubdomain is the name of the file you created before.



  Confirming To confirm you did all the steps completely, connect to http://mysubdomain.username.kd.io and you should see whatever you have in your directory of choice. 
  Troubleshooting   Koding 404 If you load your subdomain and you encounter a Koding page that says &amp;quot;404 - mysubdomain.username.kd.io does not exist.&amp;quot; then your domain is not linked properly to your VM. See Domain Management for help with that. 
  Apache 404 If you see a plain white page saying &amp;quot;Not Found&amp;quot; with mentions of Apache and Ubuntu, then Apache is correctly loading a directory, but the directory is empty. Confirm that your DocumentRoot is a correct, and absolute directory.
</description>
  </item>
  
  <item>
    <title>What is Koding?</title>
    <link>//learn.koding.com/guides/what-is-koding</link>
    <pubDate>"2014-02-17T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/what-is-koding</guid>
    <author>Team Koding</author>
    <description>Koding is an online development environment with the goal of simplifying 
worldwide development and providing free computation and development 
to everyone. It does this by offering Free VMs for development to anyone. The 
Koding VMs provide you with a real Ubuntu OS, with a real Terminal, and 
allow you to work on real code. Python,PHP, C++, C, it doesn&amp;apos;t matter. Even 
better, they are online. Accessible from anywhere in the world. Even sharable 
with teams.
  Is Koding a Production Host? Koding is first and foremost a Development Environment, and not a Production 
Host. All features have been tailored with this in mind and evidence of this is 
reflected in all of the features you see implemented. Lets highlight some of 
these items.
  VMs Shutdown After Logout Approximately 60 minutes after you log out, your Free VMs will shut down. Why?Koding&amp;#x2018;s development focus is not centered around hosting your blog/site.Koding is here to enable you and to help you make great things. Attempting to 
be yet another host in a sea of perfectly capable production hosts won&amp;#x2019;t help 
achieve that goal.
Another benefit of this system, is that it helps avoid security concerns that 
collectively harm us all. There are plenty of users out there who have used 
Koding to host dangerous applications. Phishing, scamming, spamming, all of it. 
This directly harms all of us, by giving Koding a bad name, wasting resources, 
and hindering a service that we are trying to be productive with. It&amp;apos;s no 
surprise that restrictions need to be put in place to inhibit this behavior, 
for the benefit of everyone.
Note: In the future Paid Always-On VMs will be an option. This is currently 
not available though.
  CPU Bursts vs Sustained Koding wants to help you get work done, and get work done fast. Things like 
compilers have a lot to compute, but in short sporadic bursts.Koding&amp;apos;s CPUallocation has been tailored with this in mind. It wants you to 
compute what you need, as soon as possible. It is not tailored for a long 
running process that expect heavy and consistent usage, such as a 
Minecraft server.
  Raw Ubuntu OS These days a lot of hosting platforms are heavily optimized for their specific 
niche(s). They streamline the process of hosting your language or application 
style of choice, which gives you added stability and performance gains.Examples of this are the plethora of Apache-PHP hosts, Nodejitsu, Google App 
Engine, Heroku, AppFog, and a nearly limitless amount of others.
Why is this? Well, production hosting is hard, and there are obvious benefits 
to letting someone else do it. The idea of uploading your php site to a 
standard php host is easy. The idea of buying a dedicated server, setting up 
Apache, firewalls, updates, etc, just seems a bit crazy in comparison. On top 
of that, what about load balancing and CDNs? Doing it all yourself can be hard.
Well, Koding gives you that raw machine. It&amp;#x2018;s not trying to make production 
hosting for you, but rather it&amp;#x2019;s giving you a completely open and powerful 
environment to make stuff! So by all means make your Wordpress blog on 
Koding, and if you really want to host it on Koding wait a while and buy an 
Always-On VM. Just be aware of the design goals.
</description>
  </item>
  
  <item>
    <title>Get Help with Teamwork</title>
    <link>//learn.koding.com/guides/get-help-with-teamwork</link>
    <pubDate>"2014-02-14T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/get-help-with-teamwork</guid>
    <author>Team Koding</author>
    <description>Teamwork is a great application for Pair Programming, but an often overlooked use case is having someone show you how to do something if you&amp;apos;re having trouble! In this article, we&amp;apos;ll go over that! 
  Inviting others to a help session 
First, open up the Teamwork application.
Next, in the upper right click on the Tools button. This will popup a modal, with various options in it.
Copy your Session ID from the upper right of the modal, underneath &amp;quot;Invite&amp;quot;. It will look like username_niju_86
With that link in hand, all you need to do is share that with someone else! When they join you, they will be in your VM along with you, and you can see each other&amp;apos;s modifications in real time.

  Joining someone else&amp;apos;s session 
When you are given a Session ID, copy it.
Open up the Teamwork application, and choose the Tools button in the upper right.
On the right side of the modal that popped up, under Join, paste in the Session ID.
Press return! You will be loaded into the other person&amp;apos;s Virtual Machine, and you can both see each others actions in real time.

</description>
  </item>
  
  <item>
    <title>Getting Started</title>
    <link>//learn.koding.com/guides/getting-started</link>
    <pubDate>"2014-02-07T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started</guid>
    <author>Team Koding</author>
    <description>In this Getting Started series, lets go over some basic usage of Koding. We&amp;apos;ll 
go over each section, and by the end you should have a basic understanding how 
where everything is located in Koding. 
</description>
  </item>
  
  <item>
    <title>General .htaccess</title>
    <link>//learn.koding.com/guides/general-htaccess</link>
    <pubDate>"2014-02-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/general-htaccess</guid>
    <author>Team Koding</author>
    <description>Htaccess is a pretty well understood and standard feature among web hosts. Koding&amp;apos;s .htaccess is no different than any other, so the plethora of tutorials and information out there will work perfectly fine on Koding.
  RewriteEngine &amp;amp; mod_rewrite For the sake of discussion, lets say I have two Koding domains http://username.kd.io and http://my.name.is.username.kd.io. How would I forward the first to the second?
Htaccess makes this pretty simple. Create a .htaccess file in your Web directory, if you don&amp;apos;t already have one, touch ~/Web/.htaccess &amp;amp;&amp;amp; chmod 644 ~/Web/.htaccess and add the following RewriteRule:
RewriteEngine On RewriteCond %{HTTP_HOST} ^username.kd.io [NC] RewriteRule ^(.*) http://my.name.is.username.kd.io/$1 [R=301]
But wait, if we go to http://username.kd.io now we are presented with the following error:
`\ Internal Server Error
The server encountered an internal error or misconfiguration and was unable to complete your request.
Please contact the server administrator, webmaster@localhost and inform them of the time the error occurred, and anything you might have done that may have caused the error.
More information about this error may be available in the server error log. `\
The reason for this is that mod_rewrite is not enabled by default. The fix for this is insanely easy, run the following command:
sudo a2enmod rewrite &amp;amp;&amp;amp; sudo service apache2 restart
This uses the command a2enmod to enable mod_rewrite, and then restarts apache. Now if we go to http://username.kd.io we are redirected to http://my.name.is.username.kd.io. Yay!
</description>
  </item>
  
  <item>
    <title>The Terminal</title>
    <link>//learn.koding.com/guides/the-terminal</link>
    <pubDate>"2014-02-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/the-terminal</guid>
    <author>Team Koding</author>
    <description></description>
  </item>
  
  <item>
    <title>Social</title>
    <link>//learn.koding.com/guides/social</link>
    <pubDate>"2014-02-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/social</guid>
    <author>Team Koding</author>
    <description></description>
  </item>
  
  <item>
    <title>Your first file on Koding</title>
    <link>//learn.koding.com/guides/your-first-file</link>
    <pubDate>"2014-02-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/your-first-file</guid>
    <author>Team Koding</author>
    <description></description>
  </item>
  
  <item>
    <title>Importing your files</title>
    <link>//learn.koding.com/guides/importing-your-files</link>
    <pubDate>"2014-02-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/importing-your-files</guid>
    <author>Team Koding</author>
    <description></description>
  </item>
  
  <item>
    <title>Add CNAME records to your domain</title>
    <link>//learn.koding.com/guides/add-cname-records-to-your-domain</link>
    <pubDate>"2014-01-17T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/add-cname-records-to-your-domain</guid>
    <author>Team Koding</author>
    <description>  Mapping your own domains to Koding is now possible, and very easy. In this 
article, we&amp;apos;ll go over this simple process.  

First, navigate to your Environments page, located here: https://koding.com/Environments
Next, click on the Domain Plus button, highlighted in this 
image:
Next, click on &amp;quot;Route own domain&amp;quot;.
If you want to create an A RECORD, copy the IP located in the 
yellow box, as seen in this image: 
Next, navigate to your Domain Registrar. In this demo, we&amp;apos;re using Name.com, but any domain provider you choose will work with Koding, as long as they support custom CNAME / A Records.
Once at your registrar, create a CNAME, or A Record, for your domain.
If you want a A Record, set the Record value to the IP you copied from the yellow box on Koding.
If you want a CNAME Record, type kd.io in the Record value. As an 
example, the following image shows a filled out CNAME record: 

Now save your Record on your domain, and on Koding, click the Create button.
After that, drag your Domain, onto your VM.
That&amp;apos;s it! Now visit your domain, and you should see your Koding VM.

</description>
  </item>
  
  <item>
    <title>Codeigniter Installation for Beginners</title>
    <link>//learn.koding.com/guides/codeigniter-for-beginners</link>
    <pubDate>"2014-01-07T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/codeigniter-for-beginners</guid>
    <author>Team Koding</author>
    <description>In this article we will go over installing Codeigniter for beginners. Follow along, or Try the Koding Demo right now! 
  What is Codeigniter? Codeigniter may be old hat to some, but the tried and true frameworks tend to hold their own for quite a long time, and for good reason. It is polished, has an extensive history, and above all has a large community to back it up. 
  So how do i get started with Codeigniter? In the following video, we&amp;#x2019;ll go over the basic process of running Codeigniter on Koding. 
As you can see, setting up CI is a pretty simple process. The only trouble is ensuring that your LAMP stack is up and running properly, but thanks to Koding this process was made easy. Koding comes with Apache by default, so Codeigniter just works. On top of that, we were able to get started with Codeigniter entirely in our browser. No downloading and installing LAMP stacks to our localhost required. 
  Can it get easier? Why yes, it can! With Teamwork we can use the Teamwork Import to import the Codeigniter download immediately. What you are left with is a Codeigniter directory structure which you can immediately access in your browser to develop on. Yes, you read that right, click the link and bam, Codeigniter is up and running. We have more beginner friendly articles and videos coming in the near future, stay tuned!
</description>
  </item>
  
  <item>
    <title>Setting up FTP on Koding</title>
    <link>//learn.koding.com/guides/setting-up-ftp-on-koding</link>
    <pubDate>"2014-01-07T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-up-ftp-on-koding</guid>
    <author>Team Koding</author>
    <description>In this tutorial, i will go over how to get your FTP Client connected to your 
VMs FTP Server. In this guide, we are using 
FileZilla as the FTP Client.
Reminder: As with all of these tutorials, they assume that there are no 
conflicts. If you have previously attempted to install this software please 
remove it fully or understand that conflicts may occur. Thanks :)
  What you will need In this tutorial you will need three things.

Your Koding username
Your Koding password
Your VM Number that you&amp;apos;d like to connect to. Refer 
here for help.

  Steps for Installation 
Install the PureFTPd apt-get package, by entering the following command: 
sudo apt-get install pure-ftpd

Enter your Koding password, which is your root password.

If a bunch of text whizzes by with no visible errors, Congratulations! You 
now have a working FTP server on this VM! Next up, we need to connect to our 
FTP Server with our FTP Client!To do this, we are going to open up FileZilla 
and press Ctrl-S, to open up our site manager. You can also open this by going 
to File -&amp;gt; Site Manager. When the Site Manager pops up, click the &amp;#x201C;New Site&amp;#x201D; 
button.

Now, the last step is to enter our PureFTPd information! Enter the following 
information into your New Site. 

Host: ftp.koding.com
Encryption: Use plain FTP Login
Type: Normal
User: &amp;lt;username&amp;gt;@&amp;lt;vm-Number&amp;gt;.&amp;lt;username&amp;gt;.koding.kd.io
Password: &amp;lt;your koding password&amp;gt;

Replace &amp;lt;username&amp;gt; with your username, and &amp;lt;vm-Number&amp;gt; with your VM 
Number; So that &amp;lt;vm-Number&amp;gt; becomes vm-0, vm-1, etc.
The FTP Username, when filled out, should look like 
leeolayvar@vm-0.leeolayvar.koding.kd.io. Make sure the end includes 
koding.kd.io, it is important.
If you have any confusion about where to enter this information, please refer 
to the video or the image below.



  Confirming your Installation Connecting to your FTP Server with your FTP Client is the easiest way to confirm it is working, but what if that fails? Is your Server running?
To find this out, run the following command: ps aux | grep ftpd. This will print the running processes that contain the text &amp;quot;ftpd&amp;quot;. What you are looking for, is a line containing &amp;quot;PURE-FTPD (SERVER)&amp;quot;. If you see that, your server is running, and the problem is likely not your server.
  Additional Resources 
FileZilla
FileZilla Download

</description>
  </item>
  
  <item>
    <title>What is Koding?</title>
    <link>//learn.koding.com/faq/what-is-koding</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/what-is-koding</guid>
    <author></author>
    <description>Koding is an online development environment with the goal of simplifying 
worldwide development and providing free computation and development 
to everyone. It does this by offering Free VMs for development to anyone. The 
Koding VMs provide you with a real Ubuntu OS, with a real Terminal, and 
allow you to work on real code. Python,PHP, C++, C, it doesn&amp;apos;t matter. Even 
better, they are online. Accessible from anywhere in the world. Even sharable 
with teams.
</description>
  </item>
  
  <item>
    <title>How do I ask for support?</title>
    <link>//learn.koding.com/faq/support</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/support</guid>
    <author></author>
    <description>If your question is not answered on Koding University, feel free to send us a support request.
Because we process a large volume of inbound emails every day, it may take us a few hours before we get to your message but we will get to it within 24 hours. 
In the meanwhile, here are a few resources that may be helpful: 

Our current status (in case we have a planned maintenance window active)
The Koding Activity Feed (in case others are discussing a related issue and have a recommendation)
Requests for new guides can be sent here

</description>
  </item>
  
  <item>
    <title>What is my sudo password?</title>
    <link>//learn.koding.com/faq/what-is-my-sudo-password</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/what-is-my-sudo-password</guid>
    <author></author>
    <description>Your sudo password is the password that you login to Koding with.
</description>
  </item>
  
  <item>
    <title>What's with the &quot;One more step&quot; to access my VM?</title>
    <link>//learn.koding.com/faq/one-more-step-to-access-your-domain</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/one-more-step-to-access-your-domain</guid>
    <author></author>
    <description>As with any free service, Koding gets quite a large number of Phishing, 
Scamming, and all around bad behavior from far too many people. It is our duty 
to ensure that we aren&amp;apos;t enabling this behavior.
Once an hour User Domains (such as http://username.kd.io) will present a page 
asking the viewer if this content is malicious in any way. The viewer of this 
page is free to click on the domain link, and proceed to the site normally.
If the site is pretending to be another site (such as a Google Login), the 
viewer has the chance to report this site right then and there. Helping to 
ensure that Phishing sites aren&amp;apos;t able to trick people.
As time goes on we will refine this method of Phishing prevention, in an effort 
to make it less hindering to the developer.
</description>
  </item>
  
  <item>
    <title>Can I change my Koding username?</title>
    <link>//learn.koding.com/faq/change-username</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/change-username</guid>
    <author></author>
    <description>In short no. Why...? It&amp;apos;s because when you first create your account we provision a lot of support services in the background for your account and all of these would need to get updated. This becomes problematic if you have made changes to your VM (even if you have created one file). If you really want to change your username, the only option is to delete your current account and make a new one with the desired username.
</description>
  </item>
  
  <item>
    <title>What ports are open on my Koding VM?</title>
    <link>//learn.koding.com/faq/open-ports</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/open-ports</guid>
    <author></author>
    <description>Koding proxies HTTP traffic from your domains to your VMs on the following 
ports:

Port 80
Ports 1024 through 10,000
Port 443 is proxied to port 80 on your VM.

</description>
  </item>
  
  <item>
    <title>MySQL Socket Error 2002</title>
    <link>//learn.koding.com/faq/mysql-socket-error-2002</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/mysql-socket-error-2002</guid>
    <author></author>
    <description>If you try to use MySQL and receive an error that looks similar to the 
following:
ERROR 2002 (HY000): Can&amp;apos;t connect to local MySQL server through socket 
&amp;apos;/var/run/mysqld/mysqld.sock&amp;apos;
That means MySQL is not running.
To start it, simply run sudo service mysql start and type in your sudo 
password when prompted.
Reminder: Your Sudo password is your Koding password.
</description>
  </item>
  
  <item>
    <title>phpMyAdmin on Koding</title>
    <link>//learn.koding.com/faq/phpmyadmin</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/phpmyadmin</guid>
    <author></author>
    <description>phpMyAdmin is installed by default on your VM. To access it, visit:
http://&amp;lt;username&amp;gt;.kd.io/phpmyadmin
Where &amp;lt;username&amp;gt; is your Koding username.
To login to phpmyadmin you will need to set a MySQL password manually. This can 
be done with the following command into your Koding 
Terminal:
mysqladmin -u root password
Now when you visit phpmyadmin, login with the following credentials:

User:   root
Pass:   NEWPASSWORD

Replace NEWPASSWORD with your MySQL Password of choice.
</description>
  </item>
  
  <item>
    <title>How do I transfer/copy files to my VM?</title>
    <link>//learn.koding.com/faq/transfer-files</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/transfer-files</guid>
    <author></author>
    <description>  I want to copy a few files Getting a few files to your Koding VM is simple and there are a variety of methods. We&amp;apos;ve put together a short video titled Importing your files in the Video&amp;apos;s section of Koding University. Check that out for a simple drag-drop method to upload a few files.
  I want to copy a large number of files To copy several files, use FTP. To set up FTP on your VM, simply open up Terminal and type in
help ftp

</description>
  </item>
  
  <item>
    <title>How do turn off my my Koding VM?</title>
    <link>//learn.koding.com/faq/vm-poweroff</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/vm-poweroff</guid>
    <author></author>
    <description>To turn off your VM, simply type in sudo poweroff into a Terminal. This will start a graceful shutdown process for your VM and within a few minutes you will see the UI reflect the powered down state for your VM.
Similarly, you can also do a sudo restart to restart your VM instead of shutting it down. A sudo shutdown will shutdown (not power off) a VM...there&amp;apos;s a difference. :)
</description>
  </item>
  
  <item>
    <title>What is my Koding Password?</title>
    <link>//learn.koding.com/faq/no-password</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/no-password</guid>
    <author></author>
    <description>If you signed up to Koding, but have yet to enter a password, check your 
email for the Email Confirmation link. Koding requires you to confirm 
your email before you can enter a password.
Once you click the confirmation link found within the Email Confirmation, 
you&amp;apos;ll be prompted to enter a password.
</description>
  </item>
  
  <item>
    <title>How Can I Make MySQL Start When My VM Starts?</title>
    <link>//learn.koding.com/faq/mysql-start-on-vm-start</link>
    <pubDate></pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/mysql-start-on-vm-start</guid>
    <author></author>
    <description>MySQL comes installed by default on all Koding VMs, but it does not start by 
automatically when the VM boots. To have it start on VM boot, run the following 
command in your Terminal:
sudo rm /etc/init/mysql.override
You may still need to start MySQL by hand, the first time. To start MySQL, run 
the following command:
sudo service mysql start
</description>
  </item>
  
</channel>
</rss>
